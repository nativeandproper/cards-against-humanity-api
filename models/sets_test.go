// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testSets(t *testing.T) {
	t.Parallel()

	query := Sets(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testSetsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	set := &Set{}
	if err = randomize.Struct(seed, set, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = set.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = set.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Sets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSetsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	set := &Set{}
	if err = randomize.Struct(seed, set, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = set.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Sets(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Sets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSetsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	set := &Set{}
	if err = randomize.Struct(seed, set, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = set.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SetSlice{set}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Sets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testSetsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	set := &Set{}
	if err = randomize.Struct(seed, set, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = set.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SetExists(tx, set.ID)
	if err != nil {
		t.Errorf("Unable to check if Set exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SetExistsG to return true, but got false.")
	}
}
func testSetsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	set := &Set{}
	if err = randomize.Struct(seed, set, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = set.Insert(tx); err != nil {
		t.Error(err)
	}

	setFound, err := FindSet(tx, set.ID)
	if err != nil {
		t.Error(err)
	}

	if setFound == nil {
		t.Error("want a record, got nil")
	}
}
func testSetsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	set := &Set{}
	if err = randomize.Struct(seed, set, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = set.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Sets(tx).Bind(set); err != nil {
		t.Error(err)
	}
}

func testSetsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	set := &Set{}
	if err = randomize.Struct(seed, set, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = set.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Sets(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSetsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	setOne := &Set{}
	setTwo := &Set{}
	if err = randomize.Struct(seed, setOne, setDBTypes, false, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}
	if err = randomize.Struct(seed, setTwo, setDBTypes, false, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = setOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = setTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Sets(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSetsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	setOne := &Set{}
	setTwo := &Set{}
	if err = randomize.Struct(seed, setOne, setDBTypes, false, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}
	if err = randomize.Struct(seed, setTwo, setDBTypes, false, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = setOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = setTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Sets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func setBeforeInsertHook(e boil.Executor, o *Set) error {
	*o = Set{}
	return nil
}

func setAfterInsertHook(e boil.Executor, o *Set) error {
	*o = Set{}
	return nil
}

func setAfterSelectHook(e boil.Executor, o *Set) error {
	*o = Set{}
	return nil
}

func setBeforeUpdateHook(e boil.Executor, o *Set) error {
	*o = Set{}
	return nil
}

func setAfterUpdateHook(e boil.Executor, o *Set) error {
	*o = Set{}
	return nil
}

func setBeforeDeleteHook(e boil.Executor, o *Set) error {
	*o = Set{}
	return nil
}

func setAfterDeleteHook(e boil.Executor, o *Set) error {
	*o = Set{}
	return nil
}

func setBeforeUpsertHook(e boil.Executor, o *Set) error {
	*o = Set{}
	return nil
}

func setAfterUpsertHook(e boil.Executor, o *Set) error {
	*o = Set{}
	return nil
}

func testSetsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Set{}
	o := &Set{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, setDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Set object: %s", err)
	}

	AddSetHook(boil.BeforeInsertHook, setBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	setBeforeInsertHooks = []SetHook{}

	AddSetHook(boil.AfterInsertHook, setAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	setAfterInsertHooks = []SetHook{}

	AddSetHook(boil.AfterSelectHook, setAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	setAfterSelectHooks = []SetHook{}

	AddSetHook(boil.BeforeUpdateHook, setBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	setBeforeUpdateHooks = []SetHook{}

	AddSetHook(boil.AfterUpdateHook, setAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	setAfterUpdateHooks = []SetHook{}

	AddSetHook(boil.BeforeDeleteHook, setBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	setBeforeDeleteHooks = []SetHook{}

	AddSetHook(boil.AfterDeleteHook, setAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	setAfterDeleteHooks = []SetHook{}

	AddSetHook(boil.BeforeUpsertHook, setBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	setBeforeUpsertHooks = []SetHook{}

	AddSetHook(boil.AfterUpsertHook, setAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	setAfterUpsertHooks = []SetHook{}
}
func testSetsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	set := &Set{}
	if err = randomize.Struct(seed, set, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = set.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Sets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSetsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	set := &Set{}
	if err = randomize.Struct(seed, set, setDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = set.Insert(tx, setColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Sets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSetToManyBlackCards(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Set
	var b, c BlackCard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, blackCardDBTypes, false, blackCardColumnsWithDefault...)
	randomize.Struct(seed, &c, blackCardDBTypes, false, blackCardColumnsWithDefault...)

	b.SetID = a.ID
	c.SetID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	blackCard, err := a.BlackCards(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range blackCard {
		if v.SetID == b.SetID {
			bFound = true
		}
		if v.SetID == c.SetID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SetSlice{&a}
	if err = a.L.LoadBlackCards(tx, false, (*[]*Set)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BlackCards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.BlackCards = nil
	if err = a.L.LoadBlackCards(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BlackCards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", blackCard)
	}
}

func testSetToManyWhiteCards(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Set
	var b, c WhiteCard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, whiteCardDBTypes, false, whiteCardColumnsWithDefault...)
	randomize.Struct(seed, &c, whiteCardDBTypes, false, whiteCardColumnsWithDefault...)

	b.SetID = a.ID
	c.SetID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	whiteCard, err := a.WhiteCards(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range whiteCard {
		if v.SetID == b.SetID {
			bFound = true
		}
		if v.SetID == c.SetID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SetSlice{&a}
	if err = a.L.LoadWhiteCards(tx, false, (*[]*Set)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WhiteCards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.WhiteCards = nil
	if err = a.L.LoadWhiteCards(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WhiteCards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", whiteCard)
	}
}

func testSetToManyAddOpBlackCards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Set
	var b, c, d, e BlackCard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, setDBTypes, false, strmangle.SetComplement(setPrimaryKeyColumns, setColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*BlackCard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, blackCardDBTypes, false, strmangle.SetComplement(blackCardPrimaryKeyColumns, blackCardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*BlackCard{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddBlackCards(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SetID {
			t.Error("foreign key was wrong value", a.ID, first.SetID)
		}
		if a.ID != second.SetID {
			t.Error("foreign key was wrong value", a.ID, second.SetID)
		}

		if first.R.Set != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Set != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.BlackCards[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.BlackCards[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.BlackCards(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSetToManyAddOpWhiteCards(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Set
	var b, c, d, e WhiteCard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, setDBTypes, false, strmangle.SetComplement(setPrimaryKeyColumns, setColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*WhiteCard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, whiteCardDBTypes, false, strmangle.SetComplement(whiteCardPrimaryKeyColumns, whiteCardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*WhiteCard{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddWhiteCards(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SetID {
			t.Error("foreign key was wrong value", a.ID, first.SetID)
		}
		if a.ID != second.SetID {
			t.Error("foreign key was wrong value", a.ID, second.SetID)
		}

		if first.R.Set != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Set != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.WhiteCards[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.WhiteCards[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.WhiteCards(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSetsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	set := &Set{}
	if err = randomize.Struct(seed, set, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = set.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = set.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSetsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	set := &Set{}
	if err = randomize.Struct(seed, set, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = set.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SetSlice{set}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testSetsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	set := &Set{}
	if err = randomize.Struct(seed, set, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = set.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Sets(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	setDBTypes = map[string]string{`CreatedAt`: `timestamp without time zone`, `ID`: `integer`, `Name`: `character varying`, `UpdatedAt`: `timestamp without time zone`}
	_          = bytes.MinRead
)

func testSetsUpdate(t *testing.T) {
	t.Parallel()

	if len(setColumns) == len(setPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	set := &Set{}
	if err = randomize.Struct(seed, set, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = set.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Sets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, set, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	if err = set.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSetsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(setColumns) == len(setPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	set := &Set{}
	if err = randomize.Struct(seed, set, setDBTypes, true, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = set.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Sets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, set, setDBTypes, true, setPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(setColumns, setPrimaryKeyColumns) {
		fields = setColumns
	} else {
		fields = strmangle.SetComplement(
			setColumns,
			setPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(set))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SetSlice{set}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testSetsUpsert(t *testing.T) {
	t.Parallel()

	if len(setColumns) == len(setPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	set := Set{}
	if err = randomize.Struct(seed, &set, setDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = set.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Set: %s", err)
	}

	count, err := Sets(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &set, setDBTypes, false, setPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	if err = set.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Set: %s", err)
	}

	count, err = Sets(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
