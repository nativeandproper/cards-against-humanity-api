// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testUserAccountTypeHistories(t *testing.T) {
	t.Parallel()

	query := UserAccountTypeHistories(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testUserAccountTypeHistoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAccountTypeHistory := &UserAccountTypeHistory{}
	if err = randomize.Struct(seed, userAccountTypeHistory, userAccountTypeHistoryDBTypes, true, userAccountTypeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAccountTypeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = userAccountTypeHistory.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := UserAccountTypeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserAccountTypeHistoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAccountTypeHistory := &UserAccountTypeHistory{}
	if err = randomize.Struct(seed, userAccountTypeHistory, userAccountTypeHistoryDBTypes, true, userAccountTypeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAccountTypeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UserAccountTypeHistories(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := UserAccountTypeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserAccountTypeHistoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAccountTypeHistory := &UserAccountTypeHistory{}
	if err = randomize.Struct(seed, userAccountTypeHistory, userAccountTypeHistoryDBTypes, true, userAccountTypeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAccountTypeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UserAccountTypeHistorySlice{userAccountTypeHistory}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := UserAccountTypeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testUserAccountTypeHistoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAccountTypeHistory := &UserAccountTypeHistory{}
	if err = randomize.Struct(seed, userAccountTypeHistory, userAccountTypeHistoryDBTypes, true, userAccountTypeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAccountTypeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := UserAccountTypeHistoryExists(tx, userAccountTypeHistory.ID)
	if err != nil {
		t.Errorf("Unable to check if UserAccountTypeHistory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserAccountTypeHistoryExistsG to return true, but got false.")
	}
}
func testUserAccountTypeHistoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAccountTypeHistory := &UserAccountTypeHistory{}
	if err = randomize.Struct(seed, userAccountTypeHistory, userAccountTypeHistoryDBTypes, true, userAccountTypeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAccountTypeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	userAccountTypeHistoryFound, err := FindUserAccountTypeHistory(tx, userAccountTypeHistory.ID)
	if err != nil {
		t.Error(err)
	}

	if userAccountTypeHistoryFound == nil {
		t.Error("want a record, got nil")
	}
}
func testUserAccountTypeHistoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAccountTypeHistory := &UserAccountTypeHistory{}
	if err = randomize.Struct(seed, userAccountTypeHistory, userAccountTypeHistoryDBTypes, true, userAccountTypeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAccountTypeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UserAccountTypeHistories(tx).Bind(userAccountTypeHistory); err != nil {
		t.Error(err)
	}
}

func testUserAccountTypeHistoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAccountTypeHistory := &UserAccountTypeHistory{}
	if err = randomize.Struct(seed, userAccountTypeHistory, userAccountTypeHistoryDBTypes, true, userAccountTypeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAccountTypeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := UserAccountTypeHistories(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserAccountTypeHistoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAccountTypeHistoryOne := &UserAccountTypeHistory{}
	userAccountTypeHistoryTwo := &UserAccountTypeHistory{}
	if err = randomize.Struct(seed, userAccountTypeHistoryOne, userAccountTypeHistoryDBTypes, false, userAccountTypeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, userAccountTypeHistoryTwo, userAccountTypeHistoryDBTypes, false, userAccountTypeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAccountTypeHistoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = userAccountTypeHistoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UserAccountTypeHistories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserAccountTypeHistoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userAccountTypeHistoryOne := &UserAccountTypeHistory{}
	userAccountTypeHistoryTwo := &UserAccountTypeHistory{}
	if err = randomize.Struct(seed, userAccountTypeHistoryOne, userAccountTypeHistoryDBTypes, false, userAccountTypeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, userAccountTypeHistoryTwo, userAccountTypeHistoryDBTypes, false, userAccountTypeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAccountTypeHistoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = userAccountTypeHistoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UserAccountTypeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func userAccountTypeHistoryBeforeInsertHook(e boil.Executor, o *UserAccountTypeHistory) error {
	*o = UserAccountTypeHistory{}
	return nil
}

func userAccountTypeHistoryAfterInsertHook(e boil.Executor, o *UserAccountTypeHistory) error {
	*o = UserAccountTypeHistory{}
	return nil
}

func userAccountTypeHistoryAfterSelectHook(e boil.Executor, o *UserAccountTypeHistory) error {
	*o = UserAccountTypeHistory{}
	return nil
}

func userAccountTypeHistoryBeforeUpdateHook(e boil.Executor, o *UserAccountTypeHistory) error {
	*o = UserAccountTypeHistory{}
	return nil
}

func userAccountTypeHistoryAfterUpdateHook(e boil.Executor, o *UserAccountTypeHistory) error {
	*o = UserAccountTypeHistory{}
	return nil
}

func userAccountTypeHistoryBeforeDeleteHook(e boil.Executor, o *UserAccountTypeHistory) error {
	*o = UserAccountTypeHistory{}
	return nil
}

func userAccountTypeHistoryAfterDeleteHook(e boil.Executor, o *UserAccountTypeHistory) error {
	*o = UserAccountTypeHistory{}
	return nil
}

func userAccountTypeHistoryBeforeUpsertHook(e boil.Executor, o *UserAccountTypeHistory) error {
	*o = UserAccountTypeHistory{}
	return nil
}

func userAccountTypeHistoryAfterUpsertHook(e boil.Executor, o *UserAccountTypeHistory) error {
	*o = UserAccountTypeHistory{}
	return nil
}

func testUserAccountTypeHistoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &UserAccountTypeHistory{}
	o := &UserAccountTypeHistory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userAccountTypeHistoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory object: %s", err)
	}

	AddUserAccountTypeHistoryHook(boil.BeforeInsertHook, userAccountTypeHistoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userAccountTypeHistoryBeforeInsertHooks = []UserAccountTypeHistoryHook{}

	AddUserAccountTypeHistoryHook(boil.AfterInsertHook, userAccountTypeHistoryAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userAccountTypeHistoryAfterInsertHooks = []UserAccountTypeHistoryHook{}

	AddUserAccountTypeHistoryHook(boil.AfterSelectHook, userAccountTypeHistoryAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userAccountTypeHistoryAfterSelectHooks = []UserAccountTypeHistoryHook{}

	AddUserAccountTypeHistoryHook(boil.BeforeUpdateHook, userAccountTypeHistoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userAccountTypeHistoryBeforeUpdateHooks = []UserAccountTypeHistoryHook{}

	AddUserAccountTypeHistoryHook(boil.AfterUpdateHook, userAccountTypeHistoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userAccountTypeHistoryAfterUpdateHooks = []UserAccountTypeHistoryHook{}

	AddUserAccountTypeHistoryHook(boil.BeforeDeleteHook, userAccountTypeHistoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userAccountTypeHistoryBeforeDeleteHooks = []UserAccountTypeHistoryHook{}

	AddUserAccountTypeHistoryHook(boil.AfterDeleteHook, userAccountTypeHistoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userAccountTypeHistoryAfterDeleteHooks = []UserAccountTypeHistoryHook{}

	AddUserAccountTypeHistoryHook(boil.BeforeUpsertHook, userAccountTypeHistoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userAccountTypeHistoryBeforeUpsertHooks = []UserAccountTypeHistoryHook{}

	AddUserAccountTypeHistoryHook(boil.AfterUpsertHook, userAccountTypeHistoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userAccountTypeHistoryAfterUpsertHooks = []UserAccountTypeHistoryHook{}
}
func testUserAccountTypeHistoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAccountTypeHistory := &UserAccountTypeHistory{}
	if err = randomize.Struct(seed, userAccountTypeHistory, userAccountTypeHistoryDBTypes, true, userAccountTypeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAccountTypeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UserAccountTypeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserAccountTypeHistoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAccountTypeHistory := &UserAccountTypeHistory{}
	if err = randomize.Struct(seed, userAccountTypeHistory, userAccountTypeHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAccountTypeHistory.Insert(tx, userAccountTypeHistoryColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := UserAccountTypeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserAccountTypeHistoryToOneUserUsingUser(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local UserAccountTypeHistory
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userAccountTypeHistoryDBTypes, false, userAccountTypeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.User(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserAccountTypeHistorySlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*UserAccountTypeHistory)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserAccountTypeHistoryToOneAccountTypeUsingAccountType(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local UserAccountTypeHistory
	var foreign AccountType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userAccountTypeHistoryDBTypes, false, userAccountTypeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, accountTypeDBTypes, false, accountTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountType struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.AccountTypeID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.AccountType(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserAccountTypeHistorySlice{&local}
	if err = local.L.LoadAccountType(tx, false, (*[]*UserAccountTypeHistory)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.AccountType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.AccountType = nil
	if err = local.L.LoadAccountType(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.AccountType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserAccountTypeHistoryToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UserAccountTypeHistory
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountTypeHistoryDBTypes, false, strmangle.SetComplement(userAccountTypeHistoryPrimaryKeyColumns, userAccountTypeHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserAccountTypeHistories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}
func testUserAccountTypeHistoryToOneSetOpAccountTypeUsingAccountType(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UserAccountTypeHistory
	var b, c AccountType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountTypeHistoryDBTypes, false, strmangle.SetComplement(userAccountTypeHistoryPrimaryKeyColumns, userAccountTypeHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, accountTypeDBTypes, false, strmangle.SetComplement(accountTypePrimaryKeyColumns, accountTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, accountTypeDBTypes, false, strmangle.SetComplement(accountTypePrimaryKeyColumns, accountTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AccountType{&b, &c} {
		err = a.SetAccountType(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.AccountType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserAccountTypeHistories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AccountTypeID != x.ID {
			t.Error("foreign key was wrong value", a.AccountTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AccountTypeID))
		reflect.Indirect(reflect.ValueOf(&a.AccountTypeID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AccountTypeID != x.ID {
			t.Error("foreign key was wrong value", a.AccountTypeID, x.ID)
		}
	}
}
func testUserAccountTypeHistoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAccountTypeHistory := &UserAccountTypeHistory{}
	if err = randomize.Struct(seed, userAccountTypeHistory, userAccountTypeHistoryDBTypes, true, userAccountTypeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAccountTypeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = userAccountTypeHistory.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testUserAccountTypeHistoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAccountTypeHistory := &UserAccountTypeHistory{}
	if err = randomize.Struct(seed, userAccountTypeHistory, userAccountTypeHistoryDBTypes, true, userAccountTypeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAccountTypeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UserAccountTypeHistorySlice{userAccountTypeHistory}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testUserAccountTypeHistoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAccountTypeHistory := &UserAccountTypeHistory{}
	if err = randomize.Struct(seed, userAccountTypeHistory, userAccountTypeHistoryDBTypes, true, userAccountTypeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAccountTypeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UserAccountTypeHistories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userAccountTypeHistoryDBTypes = map[string]string{`AccountTypeID`: `integer`, `CreatedAt`: `timestamp without time zone`, `ID`: `integer`, `UserID`: `integer`}
	_                             = bytes.MinRead
)

func testUserAccountTypeHistoriesUpdate(t *testing.T) {
	t.Parallel()

	if len(userAccountTypeHistoryColumns) == len(userAccountTypeHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	userAccountTypeHistory := &UserAccountTypeHistory{}
	if err = randomize.Struct(seed, userAccountTypeHistory, userAccountTypeHistoryDBTypes, true, userAccountTypeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAccountTypeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UserAccountTypeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, userAccountTypeHistory, userAccountTypeHistoryDBTypes, true, userAccountTypeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}

	if err = userAccountTypeHistory.Update(tx); err != nil {
		t.Error(err)
	}
}

func testUserAccountTypeHistoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userAccountTypeHistoryColumns) == len(userAccountTypeHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	userAccountTypeHistory := &UserAccountTypeHistory{}
	if err = randomize.Struct(seed, userAccountTypeHistory, userAccountTypeHistoryDBTypes, true, userAccountTypeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAccountTypeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UserAccountTypeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, userAccountTypeHistory, userAccountTypeHistoryDBTypes, true, userAccountTypeHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userAccountTypeHistoryColumns, userAccountTypeHistoryPrimaryKeyColumns) {
		fields = userAccountTypeHistoryColumns
	} else {
		fields = strmangle.SetComplement(
			userAccountTypeHistoryColumns,
			userAccountTypeHistoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(userAccountTypeHistory))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := UserAccountTypeHistorySlice{userAccountTypeHistory}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testUserAccountTypeHistoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(userAccountTypeHistoryColumns) == len(userAccountTypeHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	userAccountTypeHistory := UserAccountTypeHistory{}
	if err = randomize.Struct(seed, &userAccountTypeHistory, userAccountTypeHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAccountTypeHistory.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert UserAccountTypeHistory: %s", err)
	}

	count, err := UserAccountTypeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &userAccountTypeHistory, userAccountTypeHistoryDBTypes, false, userAccountTypeHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserAccountTypeHistory struct: %s", err)
	}

	if err = userAccountTypeHistory.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert UserAccountTypeHistory: %s", err)
	}

	count, err = UserAccountTypeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
