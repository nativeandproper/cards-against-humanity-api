// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testWhiteCards(t *testing.T) {
	t.Parallel()

	query := WhiteCards(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testWhiteCardsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	whiteCard := &WhiteCard{}
	if err = randomize.Struct(seed, whiteCard, whiteCardDBTypes, true, whiteCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WhiteCard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = whiteCard.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = whiteCard.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := WhiteCards(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWhiteCardsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	whiteCard := &WhiteCard{}
	if err = randomize.Struct(seed, whiteCard, whiteCardDBTypes, true, whiteCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WhiteCard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = whiteCard.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = WhiteCards(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := WhiteCards(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWhiteCardsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	whiteCard := &WhiteCard{}
	if err = randomize.Struct(seed, whiteCard, whiteCardDBTypes, true, whiteCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WhiteCard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = whiteCard.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := WhiteCardSlice{whiteCard}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := WhiteCards(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testWhiteCardsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	whiteCard := &WhiteCard{}
	if err = randomize.Struct(seed, whiteCard, whiteCardDBTypes, true, whiteCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WhiteCard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = whiteCard.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := WhiteCardExists(tx, whiteCard.ID)
	if err != nil {
		t.Errorf("Unable to check if WhiteCard exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WhiteCardExistsG to return true, but got false.")
	}
}
func testWhiteCardsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	whiteCard := &WhiteCard{}
	if err = randomize.Struct(seed, whiteCard, whiteCardDBTypes, true, whiteCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WhiteCard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = whiteCard.Insert(tx); err != nil {
		t.Error(err)
	}

	whiteCardFound, err := FindWhiteCard(tx, whiteCard.ID)
	if err != nil {
		t.Error(err)
	}

	if whiteCardFound == nil {
		t.Error("want a record, got nil")
	}
}
func testWhiteCardsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	whiteCard := &WhiteCard{}
	if err = randomize.Struct(seed, whiteCard, whiteCardDBTypes, true, whiteCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WhiteCard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = whiteCard.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = WhiteCards(tx).Bind(whiteCard); err != nil {
		t.Error(err)
	}
}

func testWhiteCardsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	whiteCard := &WhiteCard{}
	if err = randomize.Struct(seed, whiteCard, whiteCardDBTypes, true, whiteCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WhiteCard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = whiteCard.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := WhiteCards(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWhiteCardsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	whiteCardOne := &WhiteCard{}
	whiteCardTwo := &WhiteCard{}
	if err = randomize.Struct(seed, whiteCardOne, whiteCardDBTypes, false, whiteCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WhiteCard struct: %s", err)
	}
	if err = randomize.Struct(seed, whiteCardTwo, whiteCardDBTypes, false, whiteCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WhiteCard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = whiteCardOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = whiteCardTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := WhiteCards(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWhiteCardsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	whiteCardOne := &WhiteCard{}
	whiteCardTwo := &WhiteCard{}
	if err = randomize.Struct(seed, whiteCardOne, whiteCardDBTypes, false, whiteCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WhiteCard struct: %s", err)
	}
	if err = randomize.Struct(seed, whiteCardTwo, whiteCardDBTypes, false, whiteCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WhiteCard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = whiteCardOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = whiteCardTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := WhiteCards(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func whiteCardBeforeInsertHook(e boil.Executor, o *WhiteCard) error {
	*o = WhiteCard{}
	return nil
}

func whiteCardAfterInsertHook(e boil.Executor, o *WhiteCard) error {
	*o = WhiteCard{}
	return nil
}

func whiteCardAfterSelectHook(e boil.Executor, o *WhiteCard) error {
	*o = WhiteCard{}
	return nil
}

func whiteCardBeforeUpdateHook(e boil.Executor, o *WhiteCard) error {
	*o = WhiteCard{}
	return nil
}

func whiteCardAfterUpdateHook(e boil.Executor, o *WhiteCard) error {
	*o = WhiteCard{}
	return nil
}

func whiteCardBeforeDeleteHook(e boil.Executor, o *WhiteCard) error {
	*o = WhiteCard{}
	return nil
}

func whiteCardAfterDeleteHook(e boil.Executor, o *WhiteCard) error {
	*o = WhiteCard{}
	return nil
}

func whiteCardBeforeUpsertHook(e boil.Executor, o *WhiteCard) error {
	*o = WhiteCard{}
	return nil
}

func whiteCardAfterUpsertHook(e boil.Executor, o *WhiteCard) error {
	*o = WhiteCard{}
	return nil
}

func testWhiteCardsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &WhiteCard{}
	o := &WhiteCard{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, whiteCardDBTypes, false); err != nil {
		t.Errorf("Unable to randomize WhiteCard object: %s", err)
	}

	AddWhiteCardHook(boil.BeforeInsertHook, whiteCardBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	whiteCardBeforeInsertHooks = []WhiteCardHook{}

	AddWhiteCardHook(boil.AfterInsertHook, whiteCardAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	whiteCardAfterInsertHooks = []WhiteCardHook{}

	AddWhiteCardHook(boil.AfterSelectHook, whiteCardAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	whiteCardAfterSelectHooks = []WhiteCardHook{}

	AddWhiteCardHook(boil.BeforeUpdateHook, whiteCardBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	whiteCardBeforeUpdateHooks = []WhiteCardHook{}

	AddWhiteCardHook(boil.AfterUpdateHook, whiteCardAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	whiteCardAfterUpdateHooks = []WhiteCardHook{}

	AddWhiteCardHook(boil.BeforeDeleteHook, whiteCardBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	whiteCardBeforeDeleteHooks = []WhiteCardHook{}

	AddWhiteCardHook(boil.AfterDeleteHook, whiteCardAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	whiteCardAfterDeleteHooks = []WhiteCardHook{}

	AddWhiteCardHook(boil.BeforeUpsertHook, whiteCardBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	whiteCardBeforeUpsertHooks = []WhiteCardHook{}

	AddWhiteCardHook(boil.AfterUpsertHook, whiteCardAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	whiteCardAfterUpsertHooks = []WhiteCardHook{}
}
func testWhiteCardsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	whiteCard := &WhiteCard{}
	if err = randomize.Struct(seed, whiteCard, whiteCardDBTypes, true, whiteCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WhiteCard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = whiteCard.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := WhiteCards(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWhiteCardsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	whiteCard := &WhiteCard{}
	if err = randomize.Struct(seed, whiteCard, whiteCardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WhiteCard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = whiteCard.Insert(tx, whiteCardColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := WhiteCards(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWhiteCardToOneSetUsingSet(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local WhiteCard
	var foreign Set

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, whiteCardDBTypes, false, whiteCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WhiteCard struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, setDBTypes, false, setColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Set struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.SetID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Set(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := WhiteCardSlice{&local}
	if err = local.L.LoadSet(tx, false, (*[]*WhiteCard)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Set == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Set = nil
	if err = local.L.LoadSet(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Set == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testWhiteCardToOneSetOpSetUsingSet(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a WhiteCard
	var b, c Set

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, whiteCardDBTypes, false, strmangle.SetComplement(whiteCardPrimaryKeyColumns, whiteCardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, setDBTypes, false, strmangle.SetComplement(setPrimaryKeyColumns, setColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, setDBTypes, false, strmangle.SetComplement(setPrimaryKeyColumns, setColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Set{&b, &c} {
		err = a.SetSet(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Set != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.WhiteCards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SetID != x.ID {
			t.Error("foreign key was wrong value", a.SetID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SetID))
		reflect.Indirect(reflect.ValueOf(&a.SetID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SetID != x.ID {
			t.Error("foreign key was wrong value", a.SetID, x.ID)
		}
	}
}
func testWhiteCardsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	whiteCard := &WhiteCard{}
	if err = randomize.Struct(seed, whiteCard, whiteCardDBTypes, true, whiteCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WhiteCard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = whiteCard.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = whiteCard.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testWhiteCardsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	whiteCard := &WhiteCard{}
	if err = randomize.Struct(seed, whiteCard, whiteCardDBTypes, true, whiteCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WhiteCard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = whiteCard.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := WhiteCardSlice{whiteCard}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testWhiteCardsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	whiteCard := &WhiteCard{}
	if err = randomize.Struct(seed, whiteCard, whiteCardDBTypes, true, whiteCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WhiteCard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = whiteCard.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := WhiteCards(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	whiteCardDBTypes = map[string]string{`CreatedAt`: `timestamp without time zone`, `DeletedAt`: `timestamp without time zone`, `ID`: `integer`, `SetID`: `integer`, `Text`: `text`, `UpdatedAt`: `timestamp without time zone`}
	_                = bytes.MinRead
)

func testWhiteCardsUpdate(t *testing.T) {
	t.Parallel()

	if len(whiteCardColumns) == len(whiteCardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	whiteCard := &WhiteCard{}
	if err = randomize.Struct(seed, whiteCard, whiteCardDBTypes, true, whiteCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WhiteCard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = whiteCard.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := WhiteCards(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, whiteCard, whiteCardDBTypes, true, whiteCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WhiteCard struct: %s", err)
	}

	if err = whiteCard.Update(tx); err != nil {
		t.Error(err)
	}
}

func testWhiteCardsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(whiteCardColumns) == len(whiteCardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	whiteCard := &WhiteCard{}
	if err = randomize.Struct(seed, whiteCard, whiteCardDBTypes, true, whiteCardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WhiteCard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = whiteCard.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := WhiteCards(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, whiteCard, whiteCardDBTypes, true, whiteCardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WhiteCard struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(whiteCardColumns, whiteCardPrimaryKeyColumns) {
		fields = whiteCardColumns
	} else {
		fields = strmangle.SetComplement(
			whiteCardColumns,
			whiteCardPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(whiteCard))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := WhiteCardSlice{whiteCard}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testWhiteCardsUpsert(t *testing.T) {
	t.Parallel()

	if len(whiteCardColumns) == len(whiteCardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	whiteCard := WhiteCard{}
	if err = randomize.Struct(seed, &whiteCard, whiteCardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WhiteCard struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = whiteCard.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert WhiteCard: %s", err)
	}

	count, err := WhiteCards(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &whiteCard, whiteCardDBTypes, false, whiteCardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WhiteCard struct: %s", err)
	}

	if err = whiteCard.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert WhiteCard: %s", err)
	}

	count, err = WhiteCards(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
