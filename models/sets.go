// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Set is an object representing the database table.
type Set struct {
	ID        int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	CreatedAt null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *setR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L setL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SetColumns = struct {
	ID        string
	Name      string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Name:      "name",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// setR is where relationships are stored.
type setR struct {
	BlackCards BlackCardSlice
	WhiteCards WhiteCardSlice
}

// setL is where Load methods for each relationship are stored.
type setL struct{}

var (
	setColumns               = []string{"id", "name", "created_at", "updated_at"}
	setColumnsWithoutDefault = []string{"name"}
	setColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	setPrimaryKeyColumns     = []string{"id"}
)

type (
	// SetSlice is an alias for a slice of pointers to Set.
	// This should generally be used opposed to []Set.
	SetSlice []*Set
	// SetHook is the signature for custom Set hook methods
	SetHook func(boil.Executor, *Set) error

	setQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	setType                 = reflect.TypeOf(&Set{})
	setMapping              = queries.MakeStructMapping(setType)
	setPrimaryKeyMapping, _ = queries.BindMapping(setType, setMapping, setPrimaryKeyColumns)
	setInsertCacheMut       sync.RWMutex
	setInsertCache          = make(map[string]insertCache)
	setUpdateCacheMut       sync.RWMutex
	setUpdateCache          = make(map[string]updateCache)
	setUpsertCacheMut       sync.RWMutex
	setUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var setBeforeInsertHooks []SetHook
var setBeforeUpdateHooks []SetHook
var setBeforeDeleteHooks []SetHook
var setBeforeUpsertHooks []SetHook

var setAfterInsertHooks []SetHook
var setAfterSelectHooks []SetHook
var setAfterUpdateHooks []SetHook
var setAfterDeleteHooks []SetHook
var setAfterUpsertHooks []SetHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Set) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range setBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Set) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range setBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Set) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range setBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Set) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range setBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Set) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range setAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Set) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range setAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Set) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range setAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Set) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range setAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Set) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range setAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSetHook registers your hook function for all future operations.
func AddSetHook(hookPoint boil.HookPoint, setHook SetHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		setBeforeInsertHooks = append(setBeforeInsertHooks, setHook)
	case boil.BeforeUpdateHook:
		setBeforeUpdateHooks = append(setBeforeUpdateHooks, setHook)
	case boil.BeforeDeleteHook:
		setBeforeDeleteHooks = append(setBeforeDeleteHooks, setHook)
	case boil.BeforeUpsertHook:
		setBeforeUpsertHooks = append(setBeforeUpsertHooks, setHook)
	case boil.AfterInsertHook:
		setAfterInsertHooks = append(setAfterInsertHooks, setHook)
	case boil.AfterSelectHook:
		setAfterSelectHooks = append(setAfterSelectHooks, setHook)
	case boil.AfterUpdateHook:
		setAfterUpdateHooks = append(setAfterUpdateHooks, setHook)
	case boil.AfterDeleteHook:
		setAfterDeleteHooks = append(setAfterDeleteHooks, setHook)
	case boil.AfterUpsertHook:
		setAfterUpsertHooks = append(setAfterUpsertHooks, setHook)
	}
}

// OneP returns a single set record from the query, and panics on error.
func (q setQuery) OneP() *Set {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single set record from the query.
func (q setQuery) One() (*Set, error) {
	o := &Set{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sets")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Set records from the query, and panics on error.
func (q setQuery) AllP() SetSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Set records from the query.
func (q setQuery) All() (SetSlice, error) {
	var o []*Set

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Set slice")
	}

	if len(setAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Set records in the query, and panics on error.
func (q setQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Set records in the query.
func (q setQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q setQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q setQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sets exists")
	}

	return count > 0, nil
}

// BlackCardsG retrieves all the black_card's black cards.
func (o *Set) BlackCardsG(mods ...qm.QueryMod) blackCardQuery {
	return o.BlackCards(boil.GetDB(), mods...)
}

// BlackCards retrieves all the black_card's black cards with an executor.
func (o *Set) BlackCards(exec boil.Executor, mods ...qm.QueryMod) blackCardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"black_cards\".\"set_id\"=?", o.ID),
	)

	query := BlackCards(exec, queryMods...)
	queries.SetFrom(query.Query, "\"black_cards\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"black_cards\".*"})
	}

	return query
}

// WhiteCardsG retrieves all the white_card's white cards.
func (o *Set) WhiteCardsG(mods ...qm.QueryMod) whiteCardQuery {
	return o.WhiteCards(boil.GetDB(), mods...)
}

// WhiteCards retrieves all the white_card's white cards with an executor.
func (o *Set) WhiteCards(exec boil.Executor, mods ...qm.QueryMod) whiteCardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"white_cards\".\"set_id\"=?", o.ID),
	)

	query := WhiteCards(exec, queryMods...)
	queries.SetFrom(query.Query, "\"white_cards\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"white_cards\".*"})
	}

	return query
}

// LoadBlackCards allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (setL) LoadBlackCards(e boil.Executor, singular bool, maybeSet interface{}) error {
	var slice []*Set
	var object *Set

	count := 1
	if singular {
		object = maybeSet.(*Set)
	} else {
		slice = *maybeSet.(*[]*Set)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &setR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &setR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"black_cards\" where \"set_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load black_cards")
	}
	defer results.Close()

	var resultSlice []*BlackCard
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice black_cards")
	}

	if len(blackCardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BlackCards = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SetID {
				local.R.BlackCards = append(local.R.BlackCards, foreign)
				break
			}
		}
	}

	return nil
}

// LoadWhiteCards allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (setL) LoadWhiteCards(e boil.Executor, singular bool, maybeSet interface{}) error {
	var slice []*Set
	var object *Set

	count := 1
	if singular {
		object = maybeSet.(*Set)
	} else {
		slice = *maybeSet.(*[]*Set)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &setR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &setR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"white_cards\" where \"set_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load white_cards")
	}
	defer results.Close()

	var resultSlice []*WhiteCard
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice white_cards")
	}

	if len(whiteCardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WhiteCards = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SetID {
				local.R.WhiteCards = append(local.R.WhiteCards, foreign)
				break
			}
		}
	}

	return nil
}

// AddBlackCardsG adds the given related objects to the existing relationships
// of the set, optionally inserting them as new records.
// Appends related to o.R.BlackCards.
// Sets related.R.Set appropriately.
// Uses the global database handle.
func (o *Set) AddBlackCardsG(insert bool, related ...*BlackCard) error {
	return o.AddBlackCards(boil.GetDB(), insert, related...)
}

// AddBlackCardsP adds the given related objects to the existing relationships
// of the set, optionally inserting them as new records.
// Appends related to o.R.BlackCards.
// Sets related.R.Set appropriately.
// Panics on error.
func (o *Set) AddBlackCardsP(exec boil.Executor, insert bool, related ...*BlackCard) {
	if err := o.AddBlackCards(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddBlackCardsGP adds the given related objects to the existing relationships
// of the set, optionally inserting them as new records.
// Appends related to o.R.BlackCards.
// Sets related.R.Set appropriately.
// Uses the global database handle and panics on error.
func (o *Set) AddBlackCardsGP(insert bool, related ...*BlackCard) {
	if err := o.AddBlackCards(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddBlackCards adds the given related objects to the existing relationships
// of the set, optionally inserting them as new records.
// Appends related to o.R.BlackCards.
// Sets related.R.Set appropriately.
func (o *Set) AddBlackCards(exec boil.Executor, insert bool, related ...*BlackCard) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SetID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"black_cards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"set_id"}),
				strmangle.WhereClause("\"", "\"", 2, blackCardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SetID = o.ID
		}
	}

	if o.R == nil {
		o.R = &setR{
			BlackCards: related,
		}
	} else {
		o.R.BlackCards = append(o.R.BlackCards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &blackCardR{
				Set: o,
			}
		} else {
			rel.R.Set = o
		}
	}
	return nil
}

// AddWhiteCardsG adds the given related objects to the existing relationships
// of the set, optionally inserting them as new records.
// Appends related to o.R.WhiteCards.
// Sets related.R.Set appropriately.
// Uses the global database handle.
func (o *Set) AddWhiteCardsG(insert bool, related ...*WhiteCard) error {
	return o.AddWhiteCards(boil.GetDB(), insert, related...)
}

// AddWhiteCardsP adds the given related objects to the existing relationships
// of the set, optionally inserting them as new records.
// Appends related to o.R.WhiteCards.
// Sets related.R.Set appropriately.
// Panics on error.
func (o *Set) AddWhiteCardsP(exec boil.Executor, insert bool, related ...*WhiteCard) {
	if err := o.AddWhiteCards(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddWhiteCardsGP adds the given related objects to the existing relationships
// of the set, optionally inserting them as new records.
// Appends related to o.R.WhiteCards.
// Sets related.R.Set appropriately.
// Uses the global database handle and panics on error.
func (o *Set) AddWhiteCardsGP(insert bool, related ...*WhiteCard) {
	if err := o.AddWhiteCards(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddWhiteCards adds the given related objects to the existing relationships
// of the set, optionally inserting them as new records.
// Appends related to o.R.WhiteCards.
// Sets related.R.Set appropriately.
func (o *Set) AddWhiteCards(exec boil.Executor, insert bool, related ...*WhiteCard) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SetID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"white_cards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"set_id"}),
				strmangle.WhereClause("\"", "\"", 2, whiteCardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SetID = o.ID
		}
	}

	if o.R == nil {
		o.R = &setR{
			WhiteCards: related,
		}
	} else {
		o.R.WhiteCards = append(o.R.WhiteCards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &whiteCardR{
				Set: o,
			}
		} else {
			rel.R.Set = o
		}
	}
	return nil
}

// SetsG retrieves all records.
func SetsG(mods ...qm.QueryMod) setQuery {
	return Sets(boil.GetDB(), mods...)
}

// Sets retrieves all the records using an executor.
func Sets(exec boil.Executor, mods ...qm.QueryMod) setQuery {
	mods = append(mods, qm.From("\"sets\""))
	return setQuery{NewQuery(exec, mods...)}
}

// FindSetG retrieves a single record by ID.
func FindSetG(id int, selectCols ...string) (*Set, error) {
	return FindSet(boil.GetDB(), id, selectCols...)
}

// FindSetGP retrieves a single record by ID, and panics on error.
func FindSetGP(id int, selectCols ...string) *Set {
	retobj, err := FindSet(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindSet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSet(exec boil.Executor, id int, selectCols ...string) (*Set, error) {
	setObj := &Set{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sets\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(setObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sets")
	}

	return setObj, nil
}

// FindSetP retrieves a single record by ID with an executor, and panics on error.
func FindSetP(exec boil.Executor, id int, selectCols ...string) *Set {
	retobj, err := FindSet(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Set) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Set) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Set) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Set) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no sets provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	if o.UpdatedAt.Time.IsZero() {
		o.UpdatedAt.Time = currTime
		o.UpdatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(setColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	setInsertCacheMut.RLock()
	cache, cached := setInsertCache[key]
	setInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			setColumns,
			setColumnsWithDefault,
			setColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(setType, setMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(setType, setMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sets\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sets")
	}

	if !cached {
		setInsertCacheMut.Lock()
		setInsertCache[key] = cache
		setInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Set record. See Update for
// whitelist behavior description.
func (o *Set) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Set record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Set) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Set, and panics on error.
// See Update for whitelist behavior description.
func (o *Set) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Set.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Set) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	setUpdateCacheMut.RLock()
	cache, cached := setUpdateCache[key]
	setUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			setColumns,
			setPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update sets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, setPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(setType, setMapping, append(wl, setPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update sets row")
	}

	if !cached {
		setUpdateCacheMut.Lock()
		setUpdateCache[key] = cache
		setUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q setQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q setQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for sets")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SetSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o SetSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o SetSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SetSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), setPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, setPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in set slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Set) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Set) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Set) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Set) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no sets provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}
	o.UpdatedAt.Time = currTime
	o.UpdatedAt.Valid = true

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(setColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	setUpsertCacheMut.RLock()
	cache, cached := setUpsertCache[key]
	setUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			setColumns,
			setColumnsWithDefault,
			setColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			setColumns,
			setPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert sets, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(setPrimaryKeyColumns))
			copy(conflict, setPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"sets\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(setType, setMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(setType, setMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sets")
	}

	if !cached {
		setUpsertCacheMut.Lock()
		setUpsertCache[key] = cache
		setUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Set record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Set) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Set record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Set) DeleteG() error {
	if o == nil {
		return errors.New("models: no Set provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Set record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Set) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Set record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Set) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Set provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), setPrimaryKeyMapping)
	sql := "DELETE FROM \"sets\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from sets")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q setQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q setQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no setQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from sets")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o SetSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o SetSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Set slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o SetSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SetSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Set slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(setBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), setPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, setPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from set slice")
	}

	if len(setAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Set) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Set) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Set) ReloadG() error {
	if o == nil {
		return errors.New("models: no Set provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Set) Reload(exec boil.Executor) error {
	ret, err := FindSet(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SetSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SetSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SetSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty SetSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SetSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	sets := SetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), setPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sets\".* FROM \"sets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, setPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&sets)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SetSlice")
	}

	*o = sets

	return nil
}

// SetExists checks if the Set row exists.
func SetExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sets\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sets exists")
	}

	return exists, nil
}

// SetExistsG checks if the Set row exists.
func SetExistsG(id int) (bool, error) {
	return SetExists(boil.GetDB(), id)
}

// SetExistsGP checks if the Set row exists. Panics on error.
func SetExistsGP(id int) bool {
	e, err := SetExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// SetExistsP checks if the Set row exists. Panics on error.
func SetExistsP(exec boil.Executor, id int) bool {
	e, err := SetExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
