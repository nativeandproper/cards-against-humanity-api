// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("AccountTypes", testAccountTypes)
	t.Run("APIKeys", testAPIKeys)
	t.Run("BlackCards", testBlackCards)
	t.Run("GooseDBVersions", testGooseDBVersions)
	t.Run("Sets", testSets)
	t.Run("UserAccountTypeHistories", testUserAccountTypeHistories)
	t.Run("UserAPIKeys", testUserAPIKeys)
	t.Run("UserVerificationTokens", testUserVerificationTokens)
	t.Run("Users", testUsers)
	t.Run("WhiteCards", testWhiteCards)
}

func TestDelete(t *testing.T) {
	t.Run("AccountTypes", testAccountTypesDelete)
	t.Run("APIKeys", testAPIKeysDelete)
	t.Run("BlackCards", testBlackCardsDelete)
	t.Run("GooseDBVersions", testGooseDBVersionsDelete)
	t.Run("Sets", testSetsDelete)
	t.Run("UserAccountTypeHistories", testUserAccountTypeHistoriesDelete)
	t.Run("UserAPIKeys", testUserAPIKeysDelete)
	t.Run("UserVerificationTokens", testUserVerificationTokensDelete)
	t.Run("Users", testUsersDelete)
	t.Run("WhiteCards", testWhiteCardsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("AccountTypes", testAccountTypesQueryDeleteAll)
	t.Run("APIKeys", testAPIKeysQueryDeleteAll)
	t.Run("BlackCards", testBlackCardsQueryDeleteAll)
	t.Run("GooseDBVersions", testGooseDBVersionsQueryDeleteAll)
	t.Run("Sets", testSetsQueryDeleteAll)
	t.Run("UserAccountTypeHistories", testUserAccountTypeHistoriesQueryDeleteAll)
	t.Run("UserAPIKeys", testUserAPIKeysQueryDeleteAll)
	t.Run("UserVerificationTokens", testUserVerificationTokensQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("WhiteCards", testWhiteCardsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("AccountTypes", testAccountTypesSliceDeleteAll)
	t.Run("APIKeys", testAPIKeysSliceDeleteAll)
	t.Run("BlackCards", testBlackCardsSliceDeleteAll)
	t.Run("GooseDBVersions", testGooseDBVersionsSliceDeleteAll)
	t.Run("Sets", testSetsSliceDeleteAll)
	t.Run("UserAccountTypeHistories", testUserAccountTypeHistoriesSliceDeleteAll)
	t.Run("UserAPIKeys", testUserAPIKeysSliceDeleteAll)
	t.Run("UserVerificationTokens", testUserVerificationTokensSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("WhiteCards", testWhiteCardsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("AccountTypes", testAccountTypesExists)
	t.Run("APIKeys", testAPIKeysExists)
	t.Run("BlackCards", testBlackCardsExists)
	t.Run("GooseDBVersions", testGooseDBVersionsExists)
	t.Run("Sets", testSetsExists)
	t.Run("UserAccountTypeHistories", testUserAccountTypeHistoriesExists)
	t.Run("UserAPIKeys", testUserAPIKeysExists)
	t.Run("UserVerificationTokens", testUserVerificationTokensExists)
	t.Run("Users", testUsersExists)
	t.Run("WhiteCards", testWhiteCardsExists)
}

func TestFind(t *testing.T) {
	t.Run("AccountTypes", testAccountTypesFind)
	t.Run("APIKeys", testAPIKeysFind)
	t.Run("BlackCards", testBlackCardsFind)
	t.Run("GooseDBVersions", testGooseDBVersionsFind)
	t.Run("Sets", testSetsFind)
	t.Run("UserAccountTypeHistories", testUserAccountTypeHistoriesFind)
	t.Run("UserAPIKeys", testUserAPIKeysFind)
	t.Run("UserVerificationTokens", testUserVerificationTokensFind)
	t.Run("Users", testUsersFind)
	t.Run("WhiteCards", testWhiteCardsFind)
}

func TestBind(t *testing.T) {
	t.Run("AccountTypes", testAccountTypesBind)
	t.Run("APIKeys", testAPIKeysBind)
	t.Run("BlackCards", testBlackCardsBind)
	t.Run("GooseDBVersions", testGooseDBVersionsBind)
	t.Run("Sets", testSetsBind)
	t.Run("UserAccountTypeHistories", testUserAccountTypeHistoriesBind)
	t.Run("UserAPIKeys", testUserAPIKeysBind)
	t.Run("UserVerificationTokens", testUserVerificationTokensBind)
	t.Run("Users", testUsersBind)
	t.Run("WhiteCards", testWhiteCardsBind)
}

func TestOne(t *testing.T) {
	t.Run("AccountTypes", testAccountTypesOne)
	t.Run("APIKeys", testAPIKeysOne)
	t.Run("BlackCards", testBlackCardsOne)
	t.Run("GooseDBVersions", testGooseDBVersionsOne)
	t.Run("Sets", testSetsOne)
	t.Run("UserAccountTypeHistories", testUserAccountTypeHistoriesOne)
	t.Run("UserAPIKeys", testUserAPIKeysOne)
	t.Run("UserVerificationTokens", testUserVerificationTokensOne)
	t.Run("Users", testUsersOne)
	t.Run("WhiteCards", testWhiteCardsOne)
}

func TestAll(t *testing.T) {
	t.Run("AccountTypes", testAccountTypesAll)
	t.Run("APIKeys", testAPIKeysAll)
	t.Run("BlackCards", testBlackCardsAll)
	t.Run("GooseDBVersions", testGooseDBVersionsAll)
	t.Run("Sets", testSetsAll)
	t.Run("UserAccountTypeHistories", testUserAccountTypeHistoriesAll)
	t.Run("UserAPIKeys", testUserAPIKeysAll)
	t.Run("UserVerificationTokens", testUserVerificationTokensAll)
	t.Run("Users", testUsersAll)
	t.Run("WhiteCards", testWhiteCardsAll)
}

func TestCount(t *testing.T) {
	t.Run("AccountTypes", testAccountTypesCount)
	t.Run("APIKeys", testAPIKeysCount)
	t.Run("BlackCards", testBlackCardsCount)
	t.Run("GooseDBVersions", testGooseDBVersionsCount)
	t.Run("Sets", testSetsCount)
	t.Run("UserAccountTypeHistories", testUserAccountTypeHistoriesCount)
	t.Run("UserAPIKeys", testUserAPIKeysCount)
	t.Run("UserVerificationTokens", testUserVerificationTokensCount)
	t.Run("Users", testUsersCount)
	t.Run("WhiteCards", testWhiteCardsCount)
}

func TestHooks(t *testing.T) {
	t.Run("AccountTypes", testAccountTypesHooks)
	t.Run("APIKeys", testAPIKeysHooks)
	t.Run("BlackCards", testBlackCardsHooks)
	t.Run("GooseDBVersions", testGooseDBVersionsHooks)
	t.Run("Sets", testSetsHooks)
	t.Run("UserAccountTypeHistories", testUserAccountTypeHistoriesHooks)
	t.Run("UserAPIKeys", testUserAPIKeysHooks)
	t.Run("UserVerificationTokens", testUserVerificationTokensHooks)
	t.Run("Users", testUsersHooks)
	t.Run("WhiteCards", testWhiteCardsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("AccountTypes", testAccountTypesInsert)
	t.Run("AccountTypes", testAccountTypesInsertWhitelist)
	t.Run("APIKeys", testAPIKeysInsert)
	t.Run("APIKeys", testAPIKeysInsertWhitelist)
	t.Run("BlackCards", testBlackCardsInsert)
	t.Run("BlackCards", testBlackCardsInsertWhitelist)
	t.Run("GooseDBVersions", testGooseDBVersionsInsert)
	t.Run("GooseDBVersions", testGooseDBVersionsInsertWhitelist)
	t.Run("Sets", testSetsInsert)
	t.Run("Sets", testSetsInsertWhitelist)
	t.Run("UserAccountTypeHistories", testUserAccountTypeHistoriesInsert)
	t.Run("UserAccountTypeHistories", testUserAccountTypeHistoriesInsertWhitelist)
	t.Run("UserAPIKeys", testUserAPIKeysInsert)
	t.Run("UserAPIKeys", testUserAPIKeysInsertWhitelist)
	t.Run("UserVerificationTokens", testUserVerificationTokensInsert)
	t.Run("UserVerificationTokens", testUserVerificationTokensInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("WhiteCards", testWhiteCardsInsert)
	t.Run("WhiteCards", testWhiteCardsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("BlackCardToSetUsingSet", testBlackCardToOneSetUsingSet)
	t.Run("UserAccountTypeHistoryToUserUsingUser", testUserAccountTypeHistoryToOneUserUsingUser)
	t.Run("UserAccountTypeHistoryToAccountTypeUsingAccountType", testUserAccountTypeHistoryToOneAccountTypeUsingAccountType)
	t.Run("UserAPIKeyToUserUsingUser", testUserAPIKeyToOneUserUsingUser)
	t.Run("UserAPIKeyToAPIKeyUsingAPIKey", testUserAPIKeyToOneAPIKeyUsingAPIKey)
	t.Run("UserVerificationTokenToUserUsingUser", testUserVerificationTokenToOneUserUsingUser)
	t.Run("WhiteCardToSetUsingSet", testWhiteCardToOneSetUsingSet)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AccountTypeToUserAccountTypeHistories", testAccountTypeToManyUserAccountTypeHistories)
	t.Run("APIKeyToUserAPIKeys", testAPIKeyToManyUserAPIKeys)
	t.Run("SetToBlackCards", testSetToManyBlackCards)
	t.Run("SetToWhiteCards", testSetToManyWhiteCards)
	t.Run("UserToUserAccountTypeHistories", testUserToManyUserAccountTypeHistories)
	t.Run("UserToUserAPIKeys", testUserToManyUserAPIKeys)
	t.Run("UserToUserVerificationTokens", testUserToManyUserVerificationTokens)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("BlackCardToSetUsingSet", testBlackCardToOneSetOpSetUsingSet)
	t.Run("UserAccountTypeHistoryToUserUsingUser", testUserAccountTypeHistoryToOneSetOpUserUsingUser)
	t.Run("UserAccountTypeHistoryToAccountTypeUsingAccountType", testUserAccountTypeHistoryToOneSetOpAccountTypeUsingAccountType)
	t.Run("UserAPIKeyToUserUsingUser", testUserAPIKeyToOneSetOpUserUsingUser)
	t.Run("UserAPIKeyToAPIKeyUsingAPIKey", testUserAPIKeyToOneSetOpAPIKeyUsingAPIKey)
	t.Run("UserVerificationTokenToUserUsingUser", testUserVerificationTokenToOneSetOpUserUsingUser)
	t.Run("WhiteCardToSetUsingSet", testWhiteCardToOneSetOpSetUsingSet)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AccountTypeToUserAccountTypeHistories", testAccountTypeToManyAddOpUserAccountTypeHistories)
	t.Run("APIKeyToUserAPIKeys", testAPIKeyToManyAddOpUserAPIKeys)
	t.Run("SetToBlackCards", testSetToManyAddOpBlackCards)
	t.Run("SetToWhiteCards", testSetToManyAddOpWhiteCards)
	t.Run("UserToUserAccountTypeHistories", testUserToManyAddOpUserAccountTypeHistories)
	t.Run("UserToUserAPIKeys", testUserToManyAddOpUserAPIKeys)
	t.Run("UserToUserVerificationTokens", testUserToManyAddOpUserVerificationTokens)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("AccountTypes", testAccountTypesReload)
	t.Run("APIKeys", testAPIKeysReload)
	t.Run("BlackCards", testBlackCardsReload)
	t.Run("GooseDBVersions", testGooseDBVersionsReload)
	t.Run("Sets", testSetsReload)
	t.Run("UserAccountTypeHistories", testUserAccountTypeHistoriesReload)
	t.Run("UserAPIKeys", testUserAPIKeysReload)
	t.Run("UserVerificationTokens", testUserVerificationTokensReload)
	t.Run("Users", testUsersReload)
	t.Run("WhiteCards", testWhiteCardsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("AccountTypes", testAccountTypesReloadAll)
	t.Run("APIKeys", testAPIKeysReloadAll)
	t.Run("BlackCards", testBlackCardsReloadAll)
	t.Run("GooseDBVersions", testGooseDBVersionsReloadAll)
	t.Run("Sets", testSetsReloadAll)
	t.Run("UserAccountTypeHistories", testUserAccountTypeHistoriesReloadAll)
	t.Run("UserAPIKeys", testUserAPIKeysReloadAll)
	t.Run("UserVerificationTokens", testUserVerificationTokensReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("WhiteCards", testWhiteCardsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("AccountTypes", testAccountTypesSelect)
	t.Run("APIKeys", testAPIKeysSelect)
	t.Run("BlackCards", testBlackCardsSelect)
	t.Run("GooseDBVersions", testGooseDBVersionsSelect)
	t.Run("Sets", testSetsSelect)
	t.Run("UserAccountTypeHistories", testUserAccountTypeHistoriesSelect)
	t.Run("UserAPIKeys", testUserAPIKeysSelect)
	t.Run("UserVerificationTokens", testUserVerificationTokensSelect)
	t.Run("Users", testUsersSelect)
	t.Run("WhiteCards", testWhiteCardsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("AccountTypes", testAccountTypesUpdate)
	t.Run("APIKeys", testAPIKeysUpdate)
	t.Run("BlackCards", testBlackCardsUpdate)
	t.Run("GooseDBVersions", testGooseDBVersionsUpdate)
	t.Run("Sets", testSetsUpdate)
	t.Run("UserAccountTypeHistories", testUserAccountTypeHistoriesUpdate)
	t.Run("UserAPIKeys", testUserAPIKeysUpdate)
	t.Run("UserVerificationTokens", testUserVerificationTokensUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("WhiteCards", testWhiteCardsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("AccountTypes", testAccountTypesSliceUpdateAll)
	t.Run("APIKeys", testAPIKeysSliceUpdateAll)
	t.Run("BlackCards", testBlackCardsSliceUpdateAll)
	t.Run("GooseDBVersions", testGooseDBVersionsSliceUpdateAll)
	t.Run("Sets", testSetsSliceUpdateAll)
	t.Run("UserAccountTypeHistories", testUserAccountTypeHistoriesSliceUpdateAll)
	t.Run("UserAPIKeys", testUserAPIKeysSliceUpdateAll)
	t.Run("UserVerificationTokens", testUserVerificationTokensSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("WhiteCards", testWhiteCardsSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("AccountTypes", testAccountTypesUpsert)
	t.Run("APIKeys", testAPIKeysUpsert)
	t.Run("BlackCards", testBlackCardsUpsert)
	t.Run("GooseDBVersions", testGooseDBVersionsUpsert)
	t.Run("Sets", testSetsUpsert)
	t.Run("UserAccountTypeHistories", testUserAccountTypeHistoriesUpsert)
	t.Run("UserAPIKeys", testUserAPIKeysUpsert)
	t.Run("UserVerificationTokens", testUserVerificationTokensUpsert)
	t.Run("Users", testUsersUpsert)
	t.Run("WhiteCards", testWhiteCardsUpsert)
}
