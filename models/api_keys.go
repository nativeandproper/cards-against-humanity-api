// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// APIKey is an object representing the database table.
type APIKey struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	APIKey    string    `boil:"api_key" json:"api_key" toml:"api_key" yaml:"api_key"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *apiKeyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L apiKeyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var APIKeyColumns = struct {
	ID        string
	APIKey    string
	CreatedAt string
	DeletedAt string
}{
	ID:        "id",
	APIKey:    "api_key",
	CreatedAt: "created_at",
	DeletedAt: "deleted_at",
}

// apiKeyR is where relationships are stored.
type apiKeyR struct {
	UserAPIKeys UserAPIKeySlice
}

// apiKeyL is where Load methods for each relationship are stored.
type apiKeyL struct{}

var (
	apiKeyColumns               = []string{"id", "api_key", "created_at", "deleted_at"}
	apiKeyColumnsWithoutDefault = []string{"api_key", "deleted_at"}
	apiKeyColumnsWithDefault    = []string{"id", "created_at"}
	apiKeyPrimaryKeyColumns     = []string{"id"}
)

type (
	// APIKeySlice is an alias for a slice of pointers to APIKey.
	// This should generally be used opposed to []APIKey.
	APIKeySlice []*APIKey
	// APIKeyHook is the signature for custom APIKey hook methods
	APIKeyHook func(boil.Executor, *APIKey) error

	apiKeyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	apiKeyType                 = reflect.TypeOf(&APIKey{})
	apiKeyMapping              = queries.MakeStructMapping(apiKeyType)
	apiKeyPrimaryKeyMapping, _ = queries.BindMapping(apiKeyType, apiKeyMapping, apiKeyPrimaryKeyColumns)
	apiKeyInsertCacheMut       sync.RWMutex
	apiKeyInsertCache          = make(map[string]insertCache)
	apiKeyUpdateCacheMut       sync.RWMutex
	apiKeyUpdateCache          = make(map[string]updateCache)
	apiKeyUpsertCacheMut       sync.RWMutex
	apiKeyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var apiKeyBeforeInsertHooks []APIKeyHook
var apiKeyBeforeUpdateHooks []APIKeyHook
var apiKeyBeforeDeleteHooks []APIKeyHook
var apiKeyBeforeUpsertHooks []APIKeyHook

var apiKeyAfterInsertHooks []APIKeyHook
var apiKeyAfterSelectHooks []APIKeyHook
var apiKeyAfterUpdateHooks []APIKeyHook
var apiKeyAfterDeleteHooks []APIKeyHook
var apiKeyAfterUpsertHooks []APIKeyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *APIKey) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range apiKeyBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *APIKey) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range apiKeyBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *APIKey) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range apiKeyBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *APIKey) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range apiKeyBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *APIKey) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range apiKeyAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *APIKey) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range apiKeyAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *APIKey) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range apiKeyAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *APIKey) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range apiKeyAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *APIKey) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range apiKeyAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAPIKeyHook registers your hook function for all future operations.
func AddAPIKeyHook(hookPoint boil.HookPoint, apiKeyHook APIKeyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		apiKeyBeforeInsertHooks = append(apiKeyBeforeInsertHooks, apiKeyHook)
	case boil.BeforeUpdateHook:
		apiKeyBeforeUpdateHooks = append(apiKeyBeforeUpdateHooks, apiKeyHook)
	case boil.BeforeDeleteHook:
		apiKeyBeforeDeleteHooks = append(apiKeyBeforeDeleteHooks, apiKeyHook)
	case boil.BeforeUpsertHook:
		apiKeyBeforeUpsertHooks = append(apiKeyBeforeUpsertHooks, apiKeyHook)
	case boil.AfterInsertHook:
		apiKeyAfterInsertHooks = append(apiKeyAfterInsertHooks, apiKeyHook)
	case boil.AfterSelectHook:
		apiKeyAfterSelectHooks = append(apiKeyAfterSelectHooks, apiKeyHook)
	case boil.AfterUpdateHook:
		apiKeyAfterUpdateHooks = append(apiKeyAfterUpdateHooks, apiKeyHook)
	case boil.AfterDeleteHook:
		apiKeyAfterDeleteHooks = append(apiKeyAfterDeleteHooks, apiKeyHook)
	case boil.AfterUpsertHook:
		apiKeyAfterUpsertHooks = append(apiKeyAfterUpsertHooks, apiKeyHook)
	}
}

// OneP returns a single apiKey record from the query, and panics on error.
func (q apiKeyQuery) OneP() *APIKey {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single apiKey record from the query.
func (q apiKeyQuery) One() (*APIKey, error) {
	o := &APIKey{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for api_keys")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all APIKey records from the query, and panics on error.
func (q apiKeyQuery) AllP() APIKeySlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all APIKey records from the query.
func (q apiKeyQuery) All() (APIKeySlice, error) {
	var o []*APIKey

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to APIKey slice")
	}

	if len(apiKeyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all APIKey records in the query, and panics on error.
func (q apiKeyQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all APIKey records in the query.
func (q apiKeyQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count api_keys rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q apiKeyQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q apiKeyQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if api_keys exists")
	}

	return count > 0, nil
}

// UserAPIKeysG retrieves all the user_api_key's user api keys.
func (o *APIKey) UserAPIKeysG(mods ...qm.QueryMod) userAPIKeyQuery {
	return o.UserAPIKeys(boil.GetDB(), mods...)
}

// UserAPIKeys retrieves all the user_api_key's user api keys with an executor.
func (o *APIKey) UserAPIKeys(exec boil.Executor, mods ...qm.QueryMod) userAPIKeyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_api_keys\".\"api_key_id\"=?", o.ID),
	)

	query := UserAPIKeys(exec, queryMods...)
	queries.SetFrom(query.Query, "\"user_api_keys\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_api_keys\".*"})
	}

	return query
}

// LoadUserAPIKeys allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (apiKeyL) LoadUserAPIKeys(e boil.Executor, singular bool, maybeAPIKey interface{}) error {
	var slice []*APIKey
	var object *APIKey

	count := 1
	if singular {
		object = maybeAPIKey.(*APIKey)
	} else {
		slice = *maybeAPIKey.(*[]*APIKey)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &apiKeyR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &apiKeyR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"user_api_keys\" where \"api_key_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_api_keys")
	}
	defer results.Close()

	var resultSlice []*UserAPIKey
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_api_keys")
	}

	if len(userAPIKeyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserAPIKeys = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.APIKeyID {
				local.R.UserAPIKeys = append(local.R.UserAPIKeys, foreign)
				break
			}
		}
	}

	return nil
}

// AddUserAPIKeysG adds the given related objects to the existing relationships
// of the api_key, optionally inserting them as new records.
// Appends related to o.R.UserAPIKeys.
// Sets related.R.APIKey appropriately.
// Uses the global database handle.
func (o *APIKey) AddUserAPIKeysG(insert bool, related ...*UserAPIKey) error {
	return o.AddUserAPIKeys(boil.GetDB(), insert, related...)
}

// AddUserAPIKeysP adds the given related objects to the existing relationships
// of the api_key, optionally inserting them as new records.
// Appends related to o.R.UserAPIKeys.
// Sets related.R.APIKey appropriately.
// Panics on error.
func (o *APIKey) AddUserAPIKeysP(exec boil.Executor, insert bool, related ...*UserAPIKey) {
	if err := o.AddUserAPIKeys(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserAPIKeysGP adds the given related objects to the existing relationships
// of the api_key, optionally inserting them as new records.
// Appends related to o.R.UserAPIKeys.
// Sets related.R.APIKey appropriately.
// Uses the global database handle and panics on error.
func (o *APIKey) AddUserAPIKeysGP(insert bool, related ...*UserAPIKey) {
	if err := o.AddUserAPIKeys(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUserAPIKeys adds the given related objects to the existing relationships
// of the api_key, optionally inserting them as new records.
// Appends related to o.R.UserAPIKeys.
// Sets related.R.APIKey appropriately.
func (o *APIKey) AddUserAPIKeys(exec boil.Executor, insert bool, related ...*UserAPIKey) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.APIKeyID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_api_keys\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"api_key_id"}),
				strmangle.WhereClause("\"", "\"", 2, userAPIKeyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.APIKeyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &apiKeyR{
			UserAPIKeys: related,
		}
	} else {
		o.R.UserAPIKeys = append(o.R.UserAPIKeys, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userAPIKeyR{
				APIKey: o,
			}
		} else {
			rel.R.APIKey = o
		}
	}
	return nil
}

// APIKeysG retrieves all records.
func APIKeysG(mods ...qm.QueryMod) apiKeyQuery {
	return APIKeys(boil.GetDB(), mods...)
}

// APIKeys retrieves all the records using an executor.
func APIKeys(exec boil.Executor, mods ...qm.QueryMod) apiKeyQuery {
	mods = append(mods, qm.From("\"api_keys\""))
	return apiKeyQuery{NewQuery(exec, mods...)}
}

// FindAPIKeyG retrieves a single record by ID.
func FindAPIKeyG(id int, selectCols ...string) (*APIKey, error) {
	return FindAPIKey(boil.GetDB(), id, selectCols...)
}

// FindAPIKeyGP retrieves a single record by ID, and panics on error.
func FindAPIKeyGP(id int, selectCols ...string) *APIKey {
	retobj, err := FindAPIKey(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindAPIKey retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAPIKey(exec boil.Executor, id int, selectCols ...string) (*APIKey, error) {
	apiKeyObj := &APIKey{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"api_keys\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(apiKeyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from api_keys")
	}

	return apiKeyObj, nil
}

// FindAPIKeyP retrieves a single record by ID with an executor, and panics on error.
func FindAPIKeyP(exec boil.Executor, id int, selectCols ...string) *APIKey {
	retobj, err := FindAPIKey(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *APIKey) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *APIKey) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *APIKey) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *APIKey) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no api_keys provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(apiKeyColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	apiKeyInsertCacheMut.RLock()
	cache, cached := apiKeyInsertCache[key]
	apiKeyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			apiKeyColumns,
			apiKeyColumnsWithDefault,
			apiKeyColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(apiKeyType, apiKeyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(apiKeyType, apiKeyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"api_keys\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"api_keys\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into api_keys")
	}

	if !cached {
		apiKeyInsertCacheMut.Lock()
		apiKeyInsertCache[key] = cache
		apiKeyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single APIKey record. See Update for
// whitelist behavior description.
func (o *APIKey) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single APIKey record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *APIKey) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the APIKey, and panics on error.
// See Update for whitelist behavior description.
func (o *APIKey) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the APIKey.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *APIKey) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	apiKeyUpdateCacheMut.RLock()
	cache, cached := apiKeyUpdateCache[key]
	apiKeyUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			apiKeyColumns,
			apiKeyPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update api_keys, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"api_keys\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, apiKeyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(apiKeyType, apiKeyMapping, append(wl, apiKeyPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update api_keys row")
	}

	if !cached {
		apiKeyUpdateCacheMut.Lock()
		apiKeyUpdateCache[key] = cache
		apiKeyUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q apiKeyQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q apiKeyQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for api_keys")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o APIKeySlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o APIKeySlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o APIKeySlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o APIKeySlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), apiKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"api_keys\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, apiKeyPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in apiKey slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *APIKey) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *APIKey) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *APIKey) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *APIKey) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no api_keys provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(apiKeyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	apiKeyUpsertCacheMut.RLock()
	cache, cached := apiKeyUpsertCache[key]
	apiKeyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			apiKeyColumns,
			apiKeyColumnsWithDefault,
			apiKeyColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			apiKeyColumns,
			apiKeyPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert api_keys, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(apiKeyPrimaryKeyColumns))
			copy(conflict, apiKeyPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"api_keys\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(apiKeyType, apiKeyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(apiKeyType, apiKeyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert api_keys")
	}

	if !cached {
		apiKeyUpsertCacheMut.Lock()
		apiKeyUpsertCache[key] = cache
		apiKeyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single APIKey record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *APIKey) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single APIKey record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *APIKey) DeleteG() error {
	if o == nil {
		return errors.New("models: no APIKey provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single APIKey record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *APIKey) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single APIKey record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *APIKey) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no APIKey provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), apiKeyPrimaryKeyMapping)
	sql := "DELETE FROM \"api_keys\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from api_keys")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q apiKeyQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q apiKeyQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no apiKeyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from api_keys")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o APIKeySlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o APIKeySlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no APIKey slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o APIKeySlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o APIKeySlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no APIKey slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(apiKeyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), apiKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"api_keys\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, apiKeyPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from apiKey slice")
	}

	if len(apiKeyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *APIKey) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *APIKey) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *APIKey) ReloadG() error {
	if o == nil {
		return errors.New("models: no APIKey provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *APIKey) Reload(exec boil.Executor) error {
	ret, err := FindAPIKey(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *APIKeySlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *APIKeySlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *APIKeySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty APIKeySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *APIKeySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	apiKeys := APIKeySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), apiKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"api_keys\".* FROM \"api_keys\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, apiKeyPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&apiKeys)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in APIKeySlice")
	}

	*o = apiKeys

	return nil
}

// APIKeyExists checks if the APIKey row exists.
func APIKeyExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"api_keys\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if api_keys exists")
	}

	return exists, nil
}

// APIKeyExistsG checks if the APIKey row exists.
func APIKeyExistsG(id int) (bool, error) {
	return APIKeyExists(boil.GetDB(), id)
}

// APIKeyExistsGP checks if the APIKey row exists. Panics on error.
func APIKeyExistsGP(id int) bool {
	e, err := APIKeyExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// APIKeyExistsP checks if the APIKey row exists. Panics on error.
func APIKeyExistsP(exec boil.Executor, id int) bool {
	e, err := APIKeyExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
