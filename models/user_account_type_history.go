// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// UserAccountTypeHistory is an object representing the database table.
type UserAccountTypeHistory struct {
	ID            int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID        int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	AccountTypeID int       `boil:"account_type_id" json:"account_type_id" toml:"account_type_id" yaml:"account_type_id"`
	CreatedAt     null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *userAccountTypeHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userAccountTypeHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserAccountTypeHistoryColumns = struct {
	ID            string
	UserID        string
	AccountTypeID string
	CreatedAt     string
}{
	ID:            "id",
	UserID:        "user_id",
	AccountTypeID: "account_type_id",
	CreatedAt:     "created_at",
}

// userAccountTypeHistoryR is where relationships are stored.
type userAccountTypeHistoryR struct {
	User        *User
	AccountType *AccountType
}

// userAccountTypeHistoryL is where Load methods for each relationship are stored.
type userAccountTypeHistoryL struct{}

var (
	userAccountTypeHistoryColumns               = []string{"id", "user_id", "account_type_id", "created_at"}
	userAccountTypeHistoryColumnsWithoutDefault = []string{"user_id", "account_type_id"}
	userAccountTypeHistoryColumnsWithDefault    = []string{"id", "created_at"}
	userAccountTypeHistoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserAccountTypeHistorySlice is an alias for a slice of pointers to UserAccountTypeHistory.
	// This should generally be used opposed to []UserAccountTypeHistory.
	UserAccountTypeHistorySlice []*UserAccountTypeHistory
	// UserAccountTypeHistoryHook is the signature for custom UserAccountTypeHistory hook methods
	UserAccountTypeHistoryHook func(boil.Executor, *UserAccountTypeHistory) error

	userAccountTypeHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userAccountTypeHistoryType                 = reflect.TypeOf(&UserAccountTypeHistory{})
	userAccountTypeHistoryMapping              = queries.MakeStructMapping(userAccountTypeHistoryType)
	userAccountTypeHistoryPrimaryKeyMapping, _ = queries.BindMapping(userAccountTypeHistoryType, userAccountTypeHistoryMapping, userAccountTypeHistoryPrimaryKeyColumns)
	userAccountTypeHistoryInsertCacheMut       sync.RWMutex
	userAccountTypeHistoryInsertCache          = make(map[string]insertCache)
	userAccountTypeHistoryUpdateCacheMut       sync.RWMutex
	userAccountTypeHistoryUpdateCache          = make(map[string]updateCache)
	userAccountTypeHistoryUpsertCacheMut       sync.RWMutex
	userAccountTypeHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var userAccountTypeHistoryBeforeInsertHooks []UserAccountTypeHistoryHook
var userAccountTypeHistoryBeforeUpdateHooks []UserAccountTypeHistoryHook
var userAccountTypeHistoryBeforeDeleteHooks []UserAccountTypeHistoryHook
var userAccountTypeHistoryBeforeUpsertHooks []UserAccountTypeHistoryHook

var userAccountTypeHistoryAfterInsertHooks []UserAccountTypeHistoryHook
var userAccountTypeHistoryAfterSelectHooks []UserAccountTypeHistoryHook
var userAccountTypeHistoryAfterUpdateHooks []UserAccountTypeHistoryHook
var userAccountTypeHistoryAfterDeleteHooks []UserAccountTypeHistoryHook
var userAccountTypeHistoryAfterUpsertHooks []UserAccountTypeHistoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserAccountTypeHistory) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAccountTypeHistoryBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserAccountTypeHistory) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userAccountTypeHistoryBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserAccountTypeHistory) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userAccountTypeHistoryBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserAccountTypeHistory) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAccountTypeHistoryBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserAccountTypeHistory) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAccountTypeHistoryAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserAccountTypeHistory) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userAccountTypeHistoryAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserAccountTypeHistory) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userAccountTypeHistoryAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserAccountTypeHistory) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userAccountTypeHistoryAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserAccountTypeHistory) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userAccountTypeHistoryAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserAccountTypeHistoryHook registers your hook function for all future operations.
func AddUserAccountTypeHistoryHook(hookPoint boil.HookPoint, userAccountTypeHistoryHook UserAccountTypeHistoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userAccountTypeHistoryBeforeInsertHooks = append(userAccountTypeHistoryBeforeInsertHooks, userAccountTypeHistoryHook)
	case boil.BeforeUpdateHook:
		userAccountTypeHistoryBeforeUpdateHooks = append(userAccountTypeHistoryBeforeUpdateHooks, userAccountTypeHistoryHook)
	case boil.BeforeDeleteHook:
		userAccountTypeHistoryBeforeDeleteHooks = append(userAccountTypeHistoryBeforeDeleteHooks, userAccountTypeHistoryHook)
	case boil.BeforeUpsertHook:
		userAccountTypeHistoryBeforeUpsertHooks = append(userAccountTypeHistoryBeforeUpsertHooks, userAccountTypeHistoryHook)
	case boil.AfterInsertHook:
		userAccountTypeHistoryAfterInsertHooks = append(userAccountTypeHistoryAfterInsertHooks, userAccountTypeHistoryHook)
	case boil.AfterSelectHook:
		userAccountTypeHistoryAfterSelectHooks = append(userAccountTypeHistoryAfterSelectHooks, userAccountTypeHistoryHook)
	case boil.AfterUpdateHook:
		userAccountTypeHistoryAfterUpdateHooks = append(userAccountTypeHistoryAfterUpdateHooks, userAccountTypeHistoryHook)
	case boil.AfterDeleteHook:
		userAccountTypeHistoryAfterDeleteHooks = append(userAccountTypeHistoryAfterDeleteHooks, userAccountTypeHistoryHook)
	case boil.AfterUpsertHook:
		userAccountTypeHistoryAfterUpsertHooks = append(userAccountTypeHistoryAfterUpsertHooks, userAccountTypeHistoryHook)
	}
}

// OneP returns a single userAccountTypeHistory record from the query, and panics on error.
func (q userAccountTypeHistoryQuery) OneP() *UserAccountTypeHistory {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single userAccountTypeHistory record from the query.
func (q userAccountTypeHistoryQuery) One() (*UserAccountTypeHistory, error) {
	o := &UserAccountTypeHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_account_type_history")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all UserAccountTypeHistory records from the query, and panics on error.
func (q userAccountTypeHistoryQuery) AllP() UserAccountTypeHistorySlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UserAccountTypeHistory records from the query.
func (q userAccountTypeHistoryQuery) All() (UserAccountTypeHistorySlice, error) {
	var o []*UserAccountTypeHistory

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserAccountTypeHistory slice")
	}

	if len(userAccountTypeHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all UserAccountTypeHistory records in the query, and panics on error.
func (q userAccountTypeHistoryQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UserAccountTypeHistory records in the query.
func (q userAccountTypeHistoryQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_account_type_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q userAccountTypeHistoryQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q userAccountTypeHistoryQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_account_type_history exists")
	}

	return count > 0, nil
}

// UserG pointed to by the foreign key.
func (o *UserAccountTypeHistory) UserG(mods ...qm.QueryMod) userQuery {
	return o.User(boil.GetDB(), mods...)
}

// User pointed to by the foreign key.
func (o *UserAccountTypeHistory) User(exec boil.Executor, mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(exec, queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// AccountTypeG pointed to by the foreign key.
func (o *UserAccountTypeHistory) AccountTypeG(mods ...qm.QueryMod) accountTypeQuery {
	return o.AccountType(boil.GetDB(), mods...)
}

// AccountType pointed to by the foreign key.
func (o *UserAccountTypeHistory) AccountType(exec boil.Executor, mods ...qm.QueryMod) accountTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.AccountTypeID),
	}

	queryMods = append(queryMods, mods...)

	query := AccountTypes(exec, queryMods...)
	queries.SetFrom(query.Query, "\"account_types\"")

	return query
} // LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (userAccountTypeHistoryL) LoadUser(e boil.Executor, singular bool, maybeUserAccountTypeHistory interface{}) error {
	var slice []*UserAccountTypeHistory
	var object *UserAccountTypeHistory

	count := 1
	if singular {
		object = maybeUserAccountTypeHistory.(*UserAccountTypeHistory)
	} else {
		slice = *maybeUserAccountTypeHistory.(*[]*UserAccountTypeHistory)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &userAccountTypeHistoryR{}
		}
		args[0] = object.UserID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &userAccountTypeHistoryR{}
			}
			args[i] = obj.UserID
		}
	}

	query := fmt.Sprintf(
		"select * from \"users\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}
	defer results.Close()

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if len(userAccountTypeHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.User = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				break
			}
		}
	}

	return nil
}

// LoadAccountType allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (userAccountTypeHistoryL) LoadAccountType(e boil.Executor, singular bool, maybeUserAccountTypeHistory interface{}) error {
	var slice []*UserAccountTypeHistory
	var object *UserAccountTypeHistory

	count := 1
	if singular {
		object = maybeUserAccountTypeHistory.(*UserAccountTypeHistory)
	} else {
		slice = *maybeUserAccountTypeHistory.(*[]*UserAccountTypeHistory)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &userAccountTypeHistoryR{}
		}
		args[0] = object.AccountTypeID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &userAccountTypeHistoryR{}
			}
			args[i] = obj.AccountTypeID
		}
	}

	query := fmt.Sprintf(
		"select * from \"account_types\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AccountType")
	}
	defer results.Close()

	var resultSlice []*AccountType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AccountType")
	}

	if len(userAccountTypeHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.AccountType = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountTypeID == foreign.ID {
				local.R.AccountType = foreign
				break
			}
		}
	}

	return nil
}

// SetUserG of the user_account_type_history to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserAccountTypeHistories.
// Uses the global database handle.
func (o *UserAccountTypeHistory) SetUserG(insert bool, related *User) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUserP of the user_account_type_history to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserAccountTypeHistories.
// Panics on error.
func (o *UserAccountTypeHistory) SetUserP(exec boil.Executor, insert bool, related *User) {
	if err := o.SetUser(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUserGP of the user_account_type_history to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserAccountTypeHistories.
// Uses the global database handle and panics on error.
func (o *UserAccountTypeHistory) SetUserGP(insert bool, related *User) {
	if err := o.SetUser(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetUser of the user_account_type_history to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserAccountTypeHistories.
func (o *UserAccountTypeHistory) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_account_type_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userAccountTypeHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID

	if o.R == nil {
		o.R = &userAccountTypeHistoryR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserAccountTypeHistories: UserAccountTypeHistorySlice{o},
		}
	} else {
		related.R.UserAccountTypeHistories = append(related.R.UserAccountTypeHistories, o)
	}

	return nil
}

// SetAccountTypeG of the user_account_type_history to the related item.
// Sets o.R.AccountType to related.
// Adds o to related.R.UserAccountTypeHistories.
// Uses the global database handle.
func (o *UserAccountTypeHistory) SetAccountTypeG(insert bool, related *AccountType) error {
	return o.SetAccountType(boil.GetDB(), insert, related)
}

// SetAccountTypeP of the user_account_type_history to the related item.
// Sets o.R.AccountType to related.
// Adds o to related.R.UserAccountTypeHistories.
// Panics on error.
func (o *UserAccountTypeHistory) SetAccountTypeP(exec boil.Executor, insert bool, related *AccountType) {
	if err := o.SetAccountType(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAccountTypeGP of the user_account_type_history to the related item.
// Sets o.R.AccountType to related.
// Adds o to related.R.UserAccountTypeHistories.
// Uses the global database handle and panics on error.
func (o *UserAccountTypeHistory) SetAccountTypeGP(insert bool, related *AccountType) {
	if err := o.SetAccountType(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAccountType of the user_account_type_history to the related item.
// Sets o.R.AccountType to related.
// Adds o to related.R.UserAccountTypeHistories.
func (o *UserAccountTypeHistory) SetAccountType(exec boil.Executor, insert bool, related *AccountType) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_account_type_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, userAccountTypeHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountTypeID = related.ID

	if o.R == nil {
		o.R = &userAccountTypeHistoryR{
			AccountType: related,
		}
	} else {
		o.R.AccountType = related
	}

	if related.R == nil {
		related.R = &accountTypeR{
			UserAccountTypeHistories: UserAccountTypeHistorySlice{o},
		}
	} else {
		related.R.UserAccountTypeHistories = append(related.R.UserAccountTypeHistories, o)
	}

	return nil
}

// UserAccountTypeHistoriesG retrieves all records.
func UserAccountTypeHistoriesG(mods ...qm.QueryMod) userAccountTypeHistoryQuery {
	return UserAccountTypeHistories(boil.GetDB(), mods...)
}

// UserAccountTypeHistories retrieves all the records using an executor.
func UserAccountTypeHistories(exec boil.Executor, mods ...qm.QueryMod) userAccountTypeHistoryQuery {
	mods = append(mods, qm.From("\"user_account_type_history\""))
	return userAccountTypeHistoryQuery{NewQuery(exec, mods...)}
}

// FindUserAccountTypeHistoryG retrieves a single record by ID.
func FindUserAccountTypeHistoryG(id int, selectCols ...string) (*UserAccountTypeHistory, error) {
	return FindUserAccountTypeHistory(boil.GetDB(), id, selectCols...)
}

// FindUserAccountTypeHistoryGP retrieves a single record by ID, and panics on error.
func FindUserAccountTypeHistoryGP(id int, selectCols ...string) *UserAccountTypeHistory {
	retobj, err := FindUserAccountTypeHistory(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUserAccountTypeHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserAccountTypeHistory(exec boil.Executor, id int, selectCols ...string) (*UserAccountTypeHistory, error) {
	userAccountTypeHistoryObj := &UserAccountTypeHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_account_type_history\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(userAccountTypeHistoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_account_type_history")
	}

	return userAccountTypeHistoryObj, nil
}

// FindUserAccountTypeHistoryP retrieves a single record by ID with an executor, and panics on error.
func FindUserAccountTypeHistoryP(exec boil.Executor, id int, selectCols ...string) *UserAccountTypeHistory {
	retobj, err := FindUserAccountTypeHistory(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserAccountTypeHistory) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *UserAccountTypeHistory) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UserAccountTypeHistory) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *UserAccountTypeHistory) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no user_account_type_history provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userAccountTypeHistoryColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	userAccountTypeHistoryInsertCacheMut.RLock()
	cache, cached := userAccountTypeHistoryInsertCache[key]
	userAccountTypeHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			userAccountTypeHistoryColumns,
			userAccountTypeHistoryColumnsWithDefault,
			userAccountTypeHistoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(userAccountTypeHistoryType, userAccountTypeHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userAccountTypeHistoryType, userAccountTypeHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_account_type_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_account_type_history\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_account_type_history")
	}

	if !cached {
		userAccountTypeHistoryInsertCacheMut.Lock()
		userAccountTypeHistoryInsertCache[key] = cache
		userAccountTypeHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UserAccountTypeHistory record. See Update for
// whitelist behavior description.
func (o *UserAccountTypeHistory) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single UserAccountTypeHistory record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *UserAccountTypeHistory) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the UserAccountTypeHistory, and panics on error.
// See Update for whitelist behavior description.
func (o *UserAccountTypeHistory) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the UserAccountTypeHistory.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *UserAccountTypeHistory) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	userAccountTypeHistoryUpdateCacheMut.RLock()
	cache, cached := userAccountTypeHistoryUpdateCache[key]
	userAccountTypeHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			userAccountTypeHistoryColumns,
			userAccountTypeHistoryPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update user_account_type_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_account_type_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userAccountTypeHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userAccountTypeHistoryType, userAccountTypeHistoryMapping, append(wl, userAccountTypeHistoryPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update user_account_type_history row")
	}

	if !cached {
		userAccountTypeHistoryUpdateCacheMut.Lock()
		userAccountTypeHistoryUpdateCache[key] = cache
		userAccountTypeHistoryUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q userAccountTypeHistoryQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q userAccountTypeHistoryQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for user_account_type_history")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserAccountTypeHistorySlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o UserAccountTypeHistorySlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UserAccountTypeHistorySlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserAccountTypeHistorySlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAccountTypeHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_account_type_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userAccountTypeHistoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in userAccountTypeHistory slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserAccountTypeHistory) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *UserAccountTypeHistory) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UserAccountTypeHistory) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *UserAccountTypeHistory) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no user_account_type_history provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.Time.IsZero() {
		o.CreatedAt.Time = currTime
		o.CreatedAt.Valid = true
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userAccountTypeHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userAccountTypeHistoryUpsertCacheMut.RLock()
	cache, cached := userAccountTypeHistoryUpsertCache[key]
	userAccountTypeHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			userAccountTypeHistoryColumns,
			userAccountTypeHistoryColumnsWithDefault,
			userAccountTypeHistoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			userAccountTypeHistoryColumns,
			userAccountTypeHistoryPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert user_account_type_history, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userAccountTypeHistoryPrimaryKeyColumns))
			copy(conflict, userAccountTypeHistoryPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"user_account_type_history\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userAccountTypeHistoryType, userAccountTypeHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userAccountTypeHistoryType, userAccountTypeHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_account_type_history")
	}

	if !cached {
		userAccountTypeHistoryUpsertCacheMut.Lock()
		userAccountTypeHistoryUpsertCache[key] = cache
		userAccountTypeHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single UserAccountTypeHistory record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserAccountTypeHistory) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single UserAccountTypeHistory record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserAccountTypeHistory) DeleteG() error {
	if o == nil {
		return errors.New("models: no UserAccountTypeHistory provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single UserAccountTypeHistory record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UserAccountTypeHistory) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single UserAccountTypeHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserAccountTypeHistory) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UserAccountTypeHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userAccountTypeHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"user_account_type_history\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from user_account_type_history")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q userAccountTypeHistoryQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q userAccountTypeHistoryQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no userAccountTypeHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from user_account_type_history")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o UserAccountTypeHistorySlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o UserAccountTypeHistorySlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no UserAccountTypeHistory slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UserAccountTypeHistorySlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserAccountTypeHistorySlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UserAccountTypeHistory slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(userAccountTypeHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAccountTypeHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_account_type_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userAccountTypeHistoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from userAccountTypeHistory slice")
	}

	if len(userAccountTypeHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *UserAccountTypeHistory) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UserAccountTypeHistory) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserAccountTypeHistory) ReloadG() error {
	if o == nil {
		return errors.New("models: no UserAccountTypeHistory provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserAccountTypeHistory) Reload(exec boil.Executor) error {
	ret, err := FindUserAccountTypeHistory(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserAccountTypeHistorySlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UserAccountTypeHistorySlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserAccountTypeHistorySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UserAccountTypeHistorySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserAccountTypeHistorySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	userAccountTypeHistories := UserAccountTypeHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAccountTypeHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_account_type_history\".* FROM \"user_account_type_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userAccountTypeHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&userAccountTypeHistories)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserAccountTypeHistorySlice")
	}

	*o = userAccountTypeHistories

	return nil
}

// UserAccountTypeHistoryExists checks if the UserAccountTypeHistory row exists.
func UserAccountTypeHistoryExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_account_type_history\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_account_type_history exists")
	}

	return exists, nil
}

// UserAccountTypeHistoryExistsG checks if the UserAccountTypeHistory row exists.
func UserAccountTypeHistoryExistsG(id int) (bool, error) {
	return UserAccountTypeHistoryExists(boil.GetDB(), id)
}

// UserAccountTypeHistoryExistsGP checks if the UserAccountTypeHistory row exists. Panics on error.
func UserAccountTypeHistoryExistsGP(id int) bool {
	e, err := UserAccountTypeHistoryExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UserAccountTypeHistoryExistsP checks if the UserAccountTypeHistory row exists. Panics on error.
func UserAccountTypeHistoryExistsP(exec boil.Executor, id int) bool {
	e, err := UserAccountTypeHistoryExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
