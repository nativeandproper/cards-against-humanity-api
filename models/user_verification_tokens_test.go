// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testUserVerificationTokens(t *testing.T) {
	t.Parallel()

	query := UserVerificationTokens(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testUserVerificationTokensDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userVerificationToken := &UserVerificationToken{}
	if err = randomize.Struct(seed, userVerificationToken, userVerificationTokenDBTypes, true, userVerificationTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userVerificationToken.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = userVerificationToken.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := UserVerificationTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserVerificationTokensQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userVerificationToken := &UserVerificationToken{}
	if err = randomize.Struct(seed, userVerificationToken, userVerificationTokenDBTypes, true, userVerificationTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userVerificationToken.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UserVerificationTokens(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := UserVerificationTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserVerificationTokensSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userVerificationToken := &UserVerificationToken{}
	if err = randomize.Struct(seed, userVerificationToken, userVerificationTokenDBTypes, true, userVerificationTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userVerificationToken.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UserVerificationTokenSlice{userVerificationToken}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := UserVerificationTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testUserVerificationTokensExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userVerificationToken := &UserVerificationToken{}
	if err = randomize.Struct(seed, userVerificationToken, userVerificationTokenDBTypes, true, userVerificationTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userVerificationToken.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := UserVerificationTokenExists(tx, userVerificationToken.ID)
	if err != nil {
		t.Errorf("Unable to check if UserVerificationToken exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserVerificationTokenExistsG to return true, but got false.")
	}
}
func testUserVerificationTokensFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userVerificationToken := &UserVerificationToken{}
	if err = randomize.Struct(seed, userVerificationToken, userVerificationTokenDBTypes, true, userVerificationTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userVerificationToken.Insert(tx); err != nil {
		t.Error(err)
	}

	userVerificationTokenFound, err := FindUserVerificationToken(tx, userVerificationToken.ID)
	if err != nil {
		t.Error(err)
	}

	if userVerificationTokenFound == nil {
		t.Error("want a record, got nil")
	}
}
func testUserVerificationTokensBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userVerificationToken := &UserVerificationToken{}
	if err = randomize.Struct(seed, userVerificationToken, userVerificationTokenDBTypes, true, userVerificationTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userVerificationToken.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UserVerificationTokens(tx).Bind(userVerificationToken); err != nil {
		t.Error(err)
	}
}

func testUserVerificationTokensOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userVerificationToken := &UserVerificationToken{}
	if err = randomize.Struct(seed, userVerificationToken, userVerificationTokenDBTypes, true, userVerificationTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userVerificationToken.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := UserVerificationTokens(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserVerificationTokensAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userVerificationTokenOne := &UserVerificationToken{}
	userVerificationTokenTwo := &UserVerificationToken{}
	if err = randomize.Struct(seed, userVerificationTokenOne, userVerificationTokenDBTypes, false, userVerificationTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken struct: %s", err)
	}
	if err = randomize.Struct(seed, userVerificationTokenTwo, userVerificationTokenDBTypes, false, userVerificationTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userVerificationTokenOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = userVerificationTokenTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UserVerificationTokens(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserVerificationTokensCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userVerificationTokenOne := &UserVerificationToken{}
	userVerificationTokenTwo := &UserVerificationToken{}
	if err = randomize.Struct(seed, userVerificationTokenOne, userVerificationTokenDBTypes, false, userVerificationTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken struct: %s", err)
	}
	if err = randomize.Struct(seed, userVerificationTokenTwo, userVerificationTokenDBTypes, false, userVerificationTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userVerificationTokenOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = userVerificationTokenTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UserVerificationTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func userVerificationTokenBeforeInsertHook(e boil.Executor, o *UserVerificationToken) error {
	*o = UserVerificationToken{}
	return nil
}

func userVerificationTokenAfterInsertHook(e boil.Executor, o *UserVerificationToken) error {
	*o = UserVerificationToken{}
	return nil
}

func userVerificationTokenAfterSelectHook(e boil.Executor, o *UserVerificationToken) error {
	*o = UserVerificationToken{}
	return nil
}

func userVerificationTokenBeforeUpdateHook(e boil.Executor, o *UserVerificationToken) error {
	*o = UserVerificationToken{}
	return nil
}

func userVerificationTokenAfterUpdateHook(e boil.Executor, o *UserVerificationToken) error {
	*o = UserVerificationToken{}
	return nil
}

func userVerificationTokenBeforeDeleteHook(e boil.Executor, o *UserVerificationToken) error {
	*o = UserVerificationToken{}
	return nil
}

func userVerificationTokenAfterDeleteHook(e boil.Executor, o *UserVerificationToken) error {
	*o = UserVerificationToken{}
	return nil
}

func userVerificationTokenBeforeUpsertHook(e boil.Executor, o *UserVerificationToken) error {
	*o = UserVerificationToken{}
	return nil
}

func userVerificationTokenAfterUpsertHook(e boil.Executor, o *UserVerificationToken) error {
	*o = UserVerificationToken{}
	return nil
}

func testUserVerificationTokensHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &UserVerificationToken{}
	o := &UserVerificationToken{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userVerificationTokenDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken object: %s", err)
	}

	AddUserVerificationTokenHook(boil.BeforeInsertHook, userVerificationTokenBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userVerificationTokenBeforeInsertHooks = []UserVerificationTokenHook{}

	AddUserVerificationTokenHook(boil.AfterInsertHook, userVerificationTokenAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userVerificationTokenAfterInsertHooks = []UserVerificationTokenHook{}

	AddUserVerificationTokenHook(boil.AfterSelectHook, userVerificationTokenAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userVerificationTokenAfterSelectHooks = []UserVerificationTokenHook{}

	AddUserVerificationTokenHook(boil.BeforeUpdateHook, userVerificationTokenBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userVerificationTokenBeforeUpdateHooks = []UserVerificationTokenHook{}

	AddUserVerificationTokenHook(boil.AfterUpdateHook, userVerificationTokenAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userVerificationTokenAfterUpdateHooks = []UserVerificationTokenHook{}

	AddUserVerificationTokenHook(boil.BeforeDeleteHook, userVerificationTokenBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userVerificationTokenBeforeDeleteHooks = []UserVerificationTokenHook{}

	AddUserVerificationTokenHook(boil.AfterDeleteHook, userVerificationTokenAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userVerificationTokenAfterDeleteHooks = []UserVerificationTokenHook{}

	AddUserVerificationTokenHook(boil.BeforeUpsertHook, userVerificationTokenBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userVerificationTokenBeforeUpsertHooks = []UserVerificationTokenHook{}

	AddUserVerificationTokenHook(boil.AfterUpsertHook, userVerificationTokenAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userVerificationTokenAfterUpsertHooks = []UserVerificationTokenHook{}
}
func testUserVerificationTokensInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userVerificationToken := &UserVerificationToken{}
	if err = randomize.Struct(seed, userVerificationToken, userVerificationTokenDBTypes, true, userVerificationTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userVerificationToken.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UserVerificationTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserVerificationTokensInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userVerificationToken := &UserVerificationToken{}
	if err = randomize.Struct(seed, userVerificationToken, userVerificationTokenDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userVerificationToken.Insert(tx, userVerificationTokenColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := UserVerificationTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserVerificationTokenToOneUserUsingUser(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local UserVerificationToken
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userVerificationTokenDBTypes, false, userVerificationTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.User(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserVerificationTokenSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*UserVerificationToken)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserVerificationTokenToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UserVerificationToken
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userVerificationTokenDBTypes, false, strmangle.SetComplement(userVerificationTokenPrimaryKeyColumns, userVerificationTokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserVerificationTokens[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}
func testUserVerificationTokensReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userVerificationToken := &UserVerificationToken{}
	if err = randomize.Struct(seed, userVerificationToken, userVerificationTokenDBTypes, true, userVerificationTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userVerificationToken.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = userVerificationToken.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testUserVerificationTokensReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userVerificationToken := &UserVerificationToken{}
	if err = randomize.Struct(seed, userVerificationToken, userVerificationTokenDBTypes, true, userVerificationTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userVerificationToken.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UserVerificationTokenSlice{userVerificationToken}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testUserVerificationTokensSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userVerificationToken := &UserVerificationToken{}
	if err = randomize.Struct(seed, userVerificationToken, userVerificationTokenDBTypes, true, userVerificationTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userVerificationToken.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UserVerificationTokens(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userVerificationTokenDBTypes = map[string]string{`CreatedAt`: `timestamp without time zone`, `ExpiresAt`: `timestamp without time zone`, `ID`: `integer`, `Token`: `character varying`, `UserID`: `integer`, `VerifiedAt`: `timestamp without time zone`}
	_                            = bytes.MinRead
)

func testUserVerificationTokensUpdate(t *testing.T) {
	t.Parallel()

	if len(userVerificationTokenColumns) == len(userVerificationTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	userVerificationToken := &UserVerificationToken{}
	if err = randomize.Struct(seed, userVerificationToken, userVerificationTokenDBTypes, true, userVerificationTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userVerificationToken.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UserVerificationTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, userVerificationToken, userVerificationTokenDBTypes, true, userVerificationTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken struct: %s", err)
	}

	if err = userVerificationToken.Update(tx); err != nil {
		t.Error(err)
	}
}

func testUserVerificationTokensSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userVerificationTokenColumns) == len(userVerificationTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	userVerificationToken := &UserVerificationToken{}
	if err = randomize.Struct(seed, userVerificationToken, userVerificationTokenDBTypes, true, userVerificationTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userVerificationToken.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UserVerificationTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, userVerificationToken, userVerificationTokenDBTypes, true, userVerificationTokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userVerificationTokenColumns, userVerificationTokenPrimaryKeyColumns) {
		fields = userVerificationTokenColumns
	} else {
		fields = strmangle.SetComplement(
			userVerificationTokenColumns,
			userVerificationTokenPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(userVerificationToken))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := UserVerificationTokenSlice{userVerificationToken}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testUserVerificationTokensUpsert(t *testing.T) {
	t.Parallel()

	if len(userVerificationTokenColumns) == len(userVerificationTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	userVerificationToken := UserVerificationToken{}
	if err = randomize.Struct(seed, &userVerificationToken, userVerificationTokenDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userVerificationToken.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert UserVerificationToken: %s", err)
	}

	count, err := UserVerificationTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &userVerificationToken, userVerificationTokenDBTypes, false, userVerificationTokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserVerificationToken struct: %s", err)
	}

	if err = userVerificationToken.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert UserVerificationToken: %s", err)
	}

	count, err = UserVerificationTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
