// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testUserAPIKeys(t *testing.T) {
	t.Parallel()

	query := UserAPIKeys(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testUserAPIKeysDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAPIKey := &UserAPIKey{}
	if err = randomize.Struct(seed, userAPIKey, userAPIKeyDBTypes, true, userAPIKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAPIKey.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = userAPIKey.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := UserAPIKeys(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserAPIKeysQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAPIKey := &UserAPIKey{}
	if err = randomize.Struct(seed, userAPIKey, userAPIKeyDBTypes, true, userAPIKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAPIKey.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UserAPIKeys(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := UserAPIKeys(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserAPIKeysSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAPIKey := &UserAPIKey{}
	if err = randomize.Struct(seed, userAPIKey, userAPIKeyDBTypes, true, userAPIKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAPIKey.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UserAPIKeySlice{userAPIKey}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := UserAPIKeys(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testUserAPIKeysExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAPIKey := &UserAPIKey{}
	if err = randomize.Struct(seed, userAPIKey, userAPIKeyDBTypes, true, userAPIKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAPIKey.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := UserAPIKeyExists(tx, userAPIKey.ID)
	if err != nil {
		t.Errorf("Unable to check if UserAPIKey exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserAPIKeyExistsG to return true, but got false.")
	}
}
func testUserAPIKeysFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAPIKey := &UserAPIKey{}
	if err = randomize.Struct(seed, userAPIKey, userAPIKeyDBTypes, true, userAPIKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAPIKey.Insert(tx); err != nil {
		t.Error(err)
	}

	userAPIKeyFound, err := FindUserAPIKey(tx, userAPIKey.ID)
	if err != nil {
		t.Error(err)
	}

	if userAPIKeyFound == nil {
		t.Error("want a record, got nil")
	}
}
func testUserAPIKeysBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAPIKey := &UserAPIKey{}
	if err = randomize.Struct(seed, userAPIKey, userAPIKeyDBTypes, true, userAPIKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAPIKey.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = UserAPIKeys(tx).Bind(userAPIKey); err != nil {
		t.Error(err)
	}
}

func testUserAPIKeysOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAPIKey := &UserAPIKey{}
	if err = randomize.Struct(seed, userAPIKey, userAPIKeyDBTypes, true, userAPIKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAPIKey.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := UserAPIKeys(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserAPIKeysAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAPIKeyOne := &UserAPIKey{}
	userAPIKeyTwo := &UserAPIKey{}
	if err = randomize.Struct(seed, userAPIKeyOne, userAPIKeyDBTypes, false, userAPIKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}
	if err = randomize.Struct(seed, userAPIKeyTwo, userAPIKeyDBTypes, false, userAPIKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAPIKeyOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = userAPIKeyTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UserAPIKeys(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserAPIKeysCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userAPIKeyOne := &UserAPIKey{}
	userAPIKeyTwo := &UserAPIKey{}
	if err = randomize.Struct(seed, userAPIKeyOne, userAPIKeyDBTypes, false, userAPIKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}
	if err = randomize.Struct(seed, userAPIKeyTwo, userAPIKeyDBTypes, false, userAPIKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAPIKeyOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = userAPIKeyTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UserAPIKeys(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func userAPIKeyBeforeInsertHook(e boil.Executor, o *UserAPIKey) error {
	*o = UserAPIKey{}
	return nil
}

func userAPIKeyAfterInsertHook(e boil.Executor, o *UserAPIKey) error {
	*o = UserAPIKey{}
	return nil
}

func userAPIKeyAfterSelectHook(e boil.Executor, o *UserAPIKey) error {
	*o = UserAPIKey{}
	return nil
}

func userAPIKeyBeforeUpdateHook(e boil.Executor, o *UserAPIKey) error {
	*o = UserAPIKey{}
	return nil
}

func userAPIKeyAfterUpdateHook(e boil.Executor, o *UserAPIKey) error {
	*o = UserAPIKey{}
	return nil
}

func userAPIKeyBeforeDeleteHook(e boil.Executor, o *UserAPIKey) error {
	*o = UserAPIKey{}
	return nil
}

func userAPIKeyAfterDeleteHook(e boil.Executor, o *UserAPIKey) error {
	*o = UserAPIKey{}
	return nil
}

func userAPIKeyBeforeUpsertHook(e boil.Executor, o *UserAPIKey) error {
	*o = UserAPIKey{}
	return nil
}

func userAPIKeyAfterUpsertHook(e boil.Executor, o *UserAPIKey) error {
	*o = UserAPIKey{}
	return nil
}

func testUserAPIKeysHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &UserAPIKey{}
	o := &UserAPIKey{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userAPIKeyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserAPIKey object: %s", err)
	}

	AddUserAPIKeyHook(boil.BeforeInsertHook, userAPIKeyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userAPIKeyBeforeInsertHooks = []UserAPIKeyHook{}

	AddUserAPIKeyHook(boil.AfterInsertHook, userAPIKeyAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userAPIKeyAfterInsertHooks = []UserAPIKeyHook{}

	AddUserAPIKeyHook(boil.AfterSelectHook, userAPIKeyAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userAPIKeyAfterSelectHooks = []UserAPIKeyHook{}

	AddUserAPIKeyHook(boil.BeforeUpdateHook, userAPIKeyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userAPIKeyBeforeUpdateHooks = []UserAPIKeyHook{}

	AddUserAPIKeyHook(boil.AfterUpdateHook, userAPIKeyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userAPIKeyAfterUpdateHooks = []UserAPIKeyHook{}

	AddUserAPIKeyHook(boil.BeforeDeleteHook, userAPIKeyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userAPIKeyBeforeDeleteHooks = []UserAPIKeyHook{}

	AddUserAPIKeyHook(boil.AfterDeleteHook, userAPIKeyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userAPIKeyAfterDeleteHooks = []UserAPIKeyHook{}

	AddUserAPIKeyHook(boil.BeforeUpsertHook, userAPIKeyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userAPIKeyBeforeUpsertHooks = []UserAPIKeyHook{}

	AddUserAPIKeyHook(boil.AfterUpsertHook, userAPIKeyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userAPIKeyAfterUpsertHooks = []UserAPIKeyHook{}
}
func testUserAPIKeysInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAPIKey := &UserAPIKey{}
	if err = randomize.Struct(seed, userAPIKey, userAPIKeyDBTypes, true, userAPIKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAPIKey.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UserAPIKeys(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserAPIKeysInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAPIKey := &UserAPIKey{}
	if err = randomize.Struct(seed, userAPIKey, userAPIKeyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAPIKey.Insert(tx, userAPIKeyColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := UserAPIKeys(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserAPIKeyToOneUserUsingUser(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local UserAPIKey
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userAPIKeyDBTypes, false, userAPIKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.User(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserAPIKeySlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*UserAPIKey)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserAPIKeyToOneAPIKeyUsingAPIKey(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local UserAPIKey
	var foreign APIKey

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userAPIKeyDBTypes, false, userAPIKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, apiKeyDBTypes, false, apiKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize APIKey struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.APIKeyID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.APIKey(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserAPIKeySlice{&local}
	if err = local.L.LoadAPIKey(tx, false, (*[]*UserAPIKey)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.APIKey == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.APIKey = nil
	if err = local.L.LoadAPIKey(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.APIKey == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserAPIKeyToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UserAPIKey
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAPIKeyDBTypes, false, strmangle.SetComplement(userAPIKeyPrimaryKeyColumns, userAPIKeyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserAPIKeys[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}
func testUserAPIKeyToOneSetOpAPIKeyUsingAPIKey(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a UserAPIKey
	var b, c APIKey

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAPIKeyDBTypes, false, strmangle.SetComplement(userAPIKeyPrimaryKeyColumns, userAPIKeyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, apiKeyDBTypes, false, strmangle.SetComplement(apiKeyPrimaryKeyColumns, apiKeyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, apiKeyDBTypes, false, strmangle.SetComplement(apiKeyPrimaryKeyColumns, apiKeyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*APIKey{&b, &c} {
		err = a.SetAPIKey(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.APIKey != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserAPIKeys[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.APIKeyID != x.ID {
			t.Error("foreign key was wrong value", a.APIKeyID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.APIKeyID))
		reflect.Indirect(reflect.ValueOf(&a.APIKeyID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.APIKeyID != x.ID {
			t.Error("foreign key was wrong value", a.APIKeyID, x.ID)
		}
	}
}
func testUserAPIKeysReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAPIKey := &UserAPIKey{}
	if err = randomize.Struct(seed, userAPIKey, userAPIKeyDBTypes, true, userAPIKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAPIKey.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = userAPIKey.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testUserAPIKeysReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAPIKey := &UserAPIKey{}
	if err = randomize.Struct(seed, userAPIKey, userAPIKeyDBTypes, true, userAPIKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAPIKey.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := UserAPIKeySlice{userAPIKey}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testUserAPIKeysSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAPIKey := &UserAPIKey{}
	if err = randomize.Struct(seed, userAPIKey, userAPIKeyDBTypes, true, userAPIKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAPIKey.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := UserAPIKeys(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userAPIKeyDBTypes = map[string]string{`APIKeyID`: `integer`, `ID`: `integer`, `UserID`: `integer`}
	_                 = bytes.MinRead
)

func testUserAPIKeysUpdate(t *testing.T) {
	t.Parallel()

	if len(userAPIKeyColumns) == len(userAPIKeyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	userAPIKey := &UserAPIKey{}
	if err = randomize.Struct(seed, userAPIKey, userAPIKeyDBTypes, true, userAPIKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAPIKey.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UserAPIKeys(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, userAPIKey, userAPIKeyDBTypes, true, userAPIKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}

	if err = userAPIKey.Update(tx); err != nil {
		t.Error(err)
	}
}

func testUserAPIKeysSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userAPIKeyColumns) == len(userAPIKeyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	userAPIKey := &UserAPIKey{}
	if err = randomize.Struct(seed, userAPIKey, userAPIKeyDBTypes, true, userAPIKeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAPIKey.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := UserAPIKeys(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, userAPIKey, userAPIKeyDBTypes, true, userAPIKeyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userAPIKeyColumns, userAPIKeyPrimaryKeyColumns) {
		fields = userAPIKeyColumns
	} else {
		fields = strmangle.SetComplement(
			userAPIKeyColumns,
			userAPIKeyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(userAPIKey))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := UserAPIKeySlice{userAPIKey}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testUserAPIKeysUpsert(t *testing.T) {
	t.Parallel()

	if len(userAPIKeyColumns) == len(userAPIKeyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	userAPIKey := UserAPIKey{}
	if err = randomize.Struct(seed, &userAPIKey, userAPIKeyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = userAPIKey.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert UserAPIKey: %s", err)
	}

	count, err := UserAPIKeys(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &userAPIKey, userAPIKeyDBTypes, false, userAPIKeyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserAPIKey struct: %s", err)
	}

	if err = userAPIKey.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert UserAPIKey: %s", err)
	}

	count, err = UserAPIKeys(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
